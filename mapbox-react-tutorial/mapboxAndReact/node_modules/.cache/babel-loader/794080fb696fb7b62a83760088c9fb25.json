{"ast":null,"code":"var _jsxFileName = \"/Users/jacquelinechen/Desktop/Mapbox/mapbox-react-tutorial/mapboxAndReact/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport mapboxgl from \"mapbox-gl\";\nimport MapBoxGLDraw from \"mapbox-gl-draw\";\nmapboxgl.accessToken = \"pk.eyJ1IjoiamFjcXVlbGluZWNoZW4iLCJhIjoiY2s2ZHB5Y2RxMDkxbzNkbXA2bXVzM3JvbiJ9.pUyDxtMWjGqmGgX4JAdL7g\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 5,\n      lat: 34,\n      zoom: 4\n    };\n  } //   removeRoute = () => {\n  //     if (this.map.getSource(\"route\")) {\n  //       this.map.removeLayer(\"route\");\n  //       this.map.removeSource(\"route\");\n  //       document.getElementById(\"calculated-line\").innerHTML = \"\";\n  //     } else {\n  //       return;\n  //     }\n  //   };\n  //   updateRoute = () => {\n  //     this.removeRoute(); // overwrite any existing layers\n  //     let data = this.draw.getAll();\n  //     let answer = document.getElementById(\"calculated-line\");\n  //     let lastFeature = data.features.length - 1;\n  //     let coords = data.features[lastFeature].geometry.coordinates;\n  //     let newCoords = coords.join(\";\");\n  //     this.getMatch(newCoords);\n  //   };\n  //   getMatch = e => {\n  //     let url =\n  //       \"https://api.mapbox.com/directions/v5/mapbox/cycling/\" +\n  //       e +\n  //       \"?geometries=geojson&steps=true&&access_token=\" +\n  //       mapboxgl.accessToken;\n  //     let req = new XMLHttpRequest();\n  //     console.log(\"req\", req);\n  //     req.responseType = \"json\";\n  //     req.open(\"GET\", url, true);\n  //     req.onload = function() {\n  //       let jsonResponse = req.response;\n  //       console.log(\"jsonReponse\", jsonResponse);\n  //       let distance = jsonResponse.routes[0].distance * 0.001;\n  //       let duration = jsonResponse.routes[0].duration / 60;\n  //       document.getElementById(\"calculated-line\").innerHTML =\n  //         \"Distance: \" +\n  //         distance.toFixed(2) +\n  //         \" km<br>Duration: \" +\n  //         duration.toFixed(2) +\n  //         \" minutes\";\n  //       let coords = jsonResponse.routes[0].geometry;\n  //       // add the route to the map\n  //       this.addRoute(coords);\n  //       this.getInstructions(jsonResponse.routes[0]);\n  //     };\n  //     req.send();\n  //   };\n  //   addRoute = coords => {\n  //     // check if the route is already loaded\n  //     if (this.map.getSource(\"route\")) {\n  //       this.map.removeLayer(\"route\");\n  //       this.map.removeSource(\"route\");\n  //     } else {\n  //       this.map.addLayer({\n  //         id: \"route\",\n  //         type: \"line\",\n  //         source: {\n  //           type: \"geojson\",\n  //           data: {\n  //             type: \"Feature\",\n  //             properties: {},\n  //             geometry: coords\n  //           }\n  //         },\n  //         layout: {\n  //           \"line-join\": \"round\",\n  //           \"line-cap\": \"round\"\n  //         },\n  //         paint: {\n  //           \"line-color\": \"#3b9ddd\",\n  //           \"line-width\": 8,\n  //           \"line-opacity\": 0.8\n  //         }\n  //       });\n  //     }\n  //   };\n  //   getInstructions(data) {\n  //     // Target the sidebar to add the instructions\n  //     let directions = document.getElementById(\"directions\");\n  //     let legs = data.legs;\n  //     let tripDirections = [];\n  //     // Output the instructions for each step of each leg in the response object\n  //     for (let i = 0; i < legs.length; i++) {\n  //       let steps = legs[i].steps;\n  //       for (let j = 0; j < steps.length; j++) {\n  //         tripDirections.push(\"<br><li>\" + steps[j].maneuver.instruction) +\n  //           \"</li>\";\n  //       }\n  //     }\n  //     directions.innerHTML =\n  //       \"<br><h2>Trip duration: \" +\n  //       Math.floor(data.duration / 60) +\n  //       \" min.</h2>\" +\n  //       tripDirections;\n  //   }\n\n\n  componentDidMount() {\n    React.createElement(MyContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    });\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: \"mapbox://styles/mapbox/streets-v11\",\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n    const draw = new MapBoxGLDraw({\n      displayControlsDefault: false,\n      controls: {\n        line_string: true,\n        trash: true\n      },\n      styles: [// ACTIVE (being drawn)\n      // line stroke\n      {\n        id: \"gl-draw-line\",\n        type: \"line\",\n        filter: [\"all\", [\"==\", \"$type\", \"LineString\"], [\"!=\", \"mode\", \"static\"]],\n        layout: {\n          \"line-cap\": \"round\",\n          \"line-join\": \"round\"\n        },\n        paint: {\n          \"line-color\": \"#3b9ddd\",\n          \"line-dasharray\": [0.2, 2],\n          \"line-width\": 4,\n          \"line-opacity\": 0.7\n        }\n      }, // vertex point halos\n      {\n        id: \"gl-draw-polygon-and-line-vertex-halo-active\",\n        type: \"circle\",\n        filter: [\"all\", [\"==\", \"meta\", \"vertex\"], [\"==\", \"$type\", \"Point\"], [\"!=\", \"mode\", \"static\"]],\n        paint: {\n          \"circle-radius\": 10,\n          \"circle-color\": \"#FFF\"\n        }\n      }, // vertex points\n      {\n        id: \"gl-draw-polygon-and-line-vertex-active\",\n        type: \"circle\",\n        filter: [\"all\", [\"==\", \"meta\", \"vertex\"], [\"==\", \"$type\", \"Point\"], [\"!=\", \"mode\", \"static\"]],\n        paint: {\n          \"circle-radius\": 6,\n          \"circle-color\": \"#3b9ddd\"\n        }\n      }]\n    }); // add the draw tool to the map\n\n    map.addControl(draw); // add create, update, or delete actions\n\n    map.on(\"draw.create\", this.updateRoute);\n    map.on(\"draw.update\", this.updateRoute);\n    map.on(\"draw.delete\", this.removeRoute); // Storing new coordinate (whatever the user interacts with)\n\n    map.on(\"move\", () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sidebarStyle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \"Longitude: \", this.state.lng, \" | Latitude: \", this.state.lat, \" | Zoom:\", \" \", this.state.zoom)), React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"mapContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }));\n  }\n\n}\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 222\n  },\n  __self: this\n}), document.getElementById(\"app\"));","map":{"version":3,"sources":["/Users/jacquelinechen/Desktop/Mapbox/mapbox-react-tutorial/mapboxAndReact/src/index.js"],"names":["React","ReactDOM","mapboxgl","MapBoxGLDraw","accessToken","App","Component","constructor","props","state","lng","lat","zoom","componentDidMount","map","Map","container","mapContainer","style","center","draw","displayControlsDefault","controls","line_string","trash","styles","id","type","filter","layout","paint","addControl","on","updateRoute","removeRoute","setState","getCenter","toFixed","getZoom","render","el","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport mapboxgl from \"mapbox-gl\";\nimport MapBoxGLDraw from \"mapbox-gl-draw\";\n\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoiamFjcXVlbGluZWNoZW4iLCJhIjoiY2s2ZHB5Y2RxMDkxbzNkbXA2bXVzM3JvbiJ9.pUyDxtMWjGqmGgX4JAdL7g\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: 5,\n      lat: 34,\n      zoom: 4\n    };\n  }\n\n//   removeRoute = () => {\n//     if (this.map.getSource(\"route\")) {\n//       this.map.removeLayer(\"route\");\n//       this.map.removeSource(\"route\");\n//       document.getElementById(\"calculated-line\").innerHTML = \"\";\n//     } else {\n//       return;\n//     }\n//   };\n\n//   updateRoute = () => {\n//     this.removeRoute(); // overwrite any existing layers\n//     let data = this.draw.getAll();\n//     let answer = document.getElementById(\"calculated-line\");\n//     let lastFeature = data.features.length - 1;\n//     let coords = data.features[lastFeature].geometry.coordinates;\n//     let newCoords = coords.join(\";\");\n//     this.getMatch(newCoords);\n//   };\n\n//   getMatch = e => {\n//     let url =\n//       \"https://api.mapbox.com/directions/v5/mapbox/cycling/\" +\n//       e +\n//       \"?geometries=geojson&steps=true&&access_token=\" +\n//       mapboxgl.accessToken;\n\n//     let req = new XMLHttpRequest();\n//     console.log(\"req\", req);\n//     req.responseType = \"json\";\n//     req.open(\"GET\", url, true);\n//     req.onload = function() {\n//       let jsonResponse = req.response;\n//       console.log(\"jsonReponse\", jsonResponse);\n//       let distance = jsonResponse.routes[0].distance * 0.001;\n//       let duration = jsonResponse.routes[0].duration / 60;\n//       document.getElementById(\"calculated-line\").innerHTML =\n//         \"Distance: \" +\n//         distance.toFixed(2) +\n//         \" km<br>Duration: \" +\n//         duration.toFixed(2) +\n//         \" minutes\";\n//       let coords = jsonResponse.routes[0].geometry;\n//       // add the route to the map\n//       this.addRoute(coords);\n//       this.getInstructions(jsonResponse.routes[0]);\n//     };\n//     req.send();\n//   };\n\n//   addRoute = coords => {\n//     // check if the route is already loaded\n//     if (this.map.getSource(\"route\")) {\n//       this.map.removeLayer(\"route\");\n//       this.map.removeSource(\"route\");\n//     } else {\n//       this.map.addLayer({\n//         id: \"route\",\n//         type: \"line\",\n//         source: {\n//           type: \"geojson\",\n//           data: {\n//             type: \"Feature\",\n//             properties: {},\n//             geometry: coords\n//           }\n//         },\n//         layout: {\n//           \"line-join\": \"round\",\n//           \"line-cap\": \"round\"\n//         },\n//         paint: {\n//           \"line-color\": \"#3b9ddd\",\n//           \"line-width\": 8,\n//           \"line-opacity\": 0.8\n//         }\n//       });\n//     }\n//   };\n\n  //   getInstructions(data) {\n  //     // Target the sidebar to add the instructions\n  //     let directions = document.getElementById(\"directions\");\n  //     let legs = data.legs;\n  //     let tripDirections = [];\n  //     // Output the instructions for each step of each leg in the response object\n  //     for (let i = 0; i < legs.length; i++) {\n  //       let steps = legs[i].steps;\n  //       for (let j = 0; j < steps.length; j++) {\n  //         tripDirections.push(\"<br><li>\" + steps[j].maneuver.instruction) +\n  //           \"</li>\";\n  //       }\n  //     }\n  //     directions.innerHTML =\n  //       \"<br><h2>Trip duration: \" +\n  //       Math.floor(data.duration / 60) +\n  //       \" min.</h2>\" +\n  //       tripDirections;\n  //   }\n\n  componentDidMount() {\n      <MyContext.Consumer></MyContext.Consumer>\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: \"mapbox://styles/mapbox/streets-v11\",\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n\n    const draw = new MapBoxGLDraw({\n      displayControlsDefault: false,\n      controls: {\n        line_string: true,\n        trash: true\n      },\n      styles: [\n        // ACTIVE (being drawn)\n        // line stroke\n        {\n          id: \"gl-draw-line\",\n          type: \"line\",\n          filter: [\n            \"all\",\n            [\"==\", \"$type\", \"LineString\"],\n            [\"!=\", \"mode\", \"static\"]\n          ],\n          layout: {\n            \"line-cap\": \"round\",\n            \"line-join\": \"round\"\n          },\n          paint: {\n            \"line-color\": \"#3b9ddd\",\n            \"line-dasharray\": [0.2, 2],\n            \"line-width\": 4,\n            \"line-opacity\": 0.7\n          }\n        },\n        // vertex point halos\n        {\n          id: \"gl-draw-polygon-and-line-vertex-halo-active\",\n          type: \"circle\",\n          filter: [\n            \"all\",\n            [\"==\", \"meta\", \"vertex\"],\n            [\"==\", \"$type\", \"Point\"],\n            [\"!=\", \"mode\", \"static\"]\n          ],\n          paint: {\n            \"circle-radius\": 10,\n            \"circle-color\": \"#FFF\"\n          }\n        },\n        // vertex points\n        {\n          id: \"gl-draw-polygon-and-line-vertex-active\",\n          type: \"circle\",\n          filter: [\n            \"all\",\n            [\"==\", \"meta\", \"vertex\"],\n            [\"==\", \"$type\", \"Point\"],\n            [\"!=\", \"mode\", \"static\"]\n          ],\n          paint: {\n            \"circle-radius\": 6,\n            \"circle-color\": \"#3b9ddd\"\n          }\n        }\n      ]\n    });\n\n    // add the draw tool to the map\n    map.addControl(draw);\n\n    // add create, update, or delete actions\n    map.on(\"draw.create\", this.updateRoute);\n    map.on(\"draw.update\", this.updateRoute);\n    map.on(\"draw.delete\", this.removeRoute);\n\n    // Storing new coordinate (whatever the user interacts with)\n    map.on(\"move\", () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"sidebarStyle\">\n          <div>\n            Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom:{\" \"}\n            {this.state.zoom}\n          </div>\n        </div>\n        <div ref={el => (this.mapContainer = el)} className=\"mapContainer\" />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"app\"));\n"]},"metadata":{},"sourceType":"module"}