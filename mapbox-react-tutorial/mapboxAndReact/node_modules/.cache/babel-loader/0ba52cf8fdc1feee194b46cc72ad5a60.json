{"ast":null,"code":"const CommonSelectors = require('../lib/common_selectors');\n\nconst LineString = require('../feature_types/line_string');\n\nconst isEventAtCoordinates = require('../lib/is_event_at_coordinates');\n\nconst doubleClickZoom = require('../lib/double_click_zoom');\n\nconst Constants = require('../constants');\n\nconst createVertex = require('../lib/create_vertex');\n\nmodule.exports = function (ctx) {\n  const line = new LineString(ctx, {\n    type: Constants.geojsonTypes.FEATURE,\n    properties: {},\n    geometry: {\n      type: Constants.geojsonTypes.LINE_STRING,\n      coordinates: []\n    }\n  });\n  let currentVertexPosition = 0;\n  if (ctx._test) ctx._test.line = line;\n  ctx.store.add(line);\n  return {\n    start: function () {\n      ctx.store.clearSelected();\n      doubleClickZoom.disable(ctx);\n      ctx.ui.queueMapClasses({\n        mouse: Constants.cursors.ADD\n      });\n      ctx.ui.setActiveButton(Constants.types.LINE);\n      this.on('mousemove', CommonSelectors.true, e => {\n        line.updateCoordinate(currentVertexPosition, e.lngLat.lng, e.lngLat.lat);\n\n        if (CommonSelectors.isVertex(e)) {\n          ctx.ui.queueMapClasses({\n            mouse: Constants.cursors.POINTER\n          });\n        }\n      });\n      this.on('click', CommonSelectors.true, e => {\n        if (currentVertexPosition > 0 && isEventAtCoordinates(e, line.coordinates[currentVertexPosition - 1])) {\n          return ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, {\n            featureIds: [line.id]\n          });\n        }\n\n        ctx.ui.queueMapClasses({\n          mouse: Constants.cursors.ADD\n        });\n        line.updateCoordinate(currentVertexPosition, e.lngLat.lng, e.lngLat.lat);\n        currentVertexPosition++;\n      });\n      this.on('click', CommonSelectors.isVertex, () => {\n        return ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, {\n          featureIds: [line.id]\n        });\n      });\n      this.on('keyup', CommonSelectors.isEscapeKey, () => {\n        ctx.store.delete([line.id], {\n          silent: true\n        });\n        ctx.events.changeMode(Constants.modes.SIMPLE_SELECT);\n      });\n      this.on('keyup', CommonSelectors.isEnterKey, () => {\n        ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, {\n          featureIds: [line.id]\n        });\n      });\n      ctx.events.actionable({\n        combineFeatures: false,\n        uncombineFeatures: false,\n        trash: true\n      });\n    },\n\n    stop() {\n      doubleClickZoom.enable(ctx);\n      ctx.ui.setActiveButton(); // check to see if we've deleted this feature\n\n      if (ctx.store.get(line.id) === undefined) return; //remove last added coordinate\n\n      line.removeCoordinate(`${currentVertexPosition}`);\n\n      if (line.isValid()) {\n        ctx.map.fire(Constants.events.CREATE, {\n          features: [line.toGeoJSON()]\n        });\n      } else {\n        ctx.store.delete([line.id], {\n          silent: true\n        });\n        ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, {}, {\n          silent: true\n        });\n      }\n    },\n\n    render(geojson, callback) {\n      const isActiveLine = geojson.properties.id === line.id;\n      geojson.properties.active = isActiveLine ? Constants.activeStates.ACTIVE : Constants.activeStates.INACTIVE;\n      if (!isActiveLine) return callback(geojson); // Only render the line if it has at least one real coordinate\n\n      if (geojson.geometry.coordinates.length < 2) return;\n      geojson.properties.meta = Constants.meta.FEATURE;\n\n      if (geojson.geometry.coordinates.length >= 3) {\n        callback(createVertex(line.id, geojson.geometry.coordinates[geojson.geometry.coordinates.length - 2], `${geojson.geometry.coordinates.length - 2}`, false));\n      }\n\n      callback(geojson);\n    },\n\n    trash() {\n      ctx.store.delete([line.id], {\n        silent: true\n      });\n      ctx.events.changeMode(Constants.modes.SIMPLE_SELECT);\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/jacquelinechen/Desktop/Mapbox/mapbox-react-tutorial/mapboxAndReact/node_modules/mapbox-gl-draw/src/modes/draw_line_string.js"],"names":["CommonSelectors","require","LineString","isEventAtCoordinates","doubleClickZoom","Constants","createVertex","module","exports","ctx","line","type","geojsonTypes","FEATURE","properties","geometry","LINE_STRING","coordinates","currentVertexPosition","_test","store","add","start","clearSelected","disable","ui","queueMapClasses","mouse","cursors","ADD","setActiveButton","types","LINE","on","true","e","updateCoordinate","lngLat","lng","lat","isVertex","POINTER","events","changeMode","modes","SIMPLE_SELECT","featureIds","id","isEscapeKey","delete","silent","isEnterKey","actionable","combineFeatures","uncombineFeatures","trash","stop","enable","get","undefined","removeCoordinate","isValid","map","fire","CREATE","features","toGeoJSON","render","geojson","callback","isActiveLine","active","activeStates","ACTIVE","INACTIVE","length","meta"],"mappings":"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","sourcesContent":["const CommonSelectors = require('../lib/common_selectors');\nconst LineString = require('../feature_types/line_string');\nconst isEventAtCoordinates = require('../lib/is_event_at_coordinates');\nconst doubleClickZoom = require('../lib/double_click_zoom');\nconst Constants = require('../constants');\nconst createVertex = require('../lib/create_vertex');\n\nmodule.exports = function(ctx) {\n  const line = new LineString(ctx, {\n    type: Constants.geojsonTypes.FEATURE,\n    properties: {},\n    geometry: {\n      type: Constants.geojsonTypes.LINE_STRING,\n      coordinates: []\n    }\n  });\n  let currentVertexPosition = 0;\n\n  if (ctx._test) ctx._test.line = line;\n\n  ctx.store.add(line);\n\n  return {\n    start: function() {\n      ctx.store.clearSelected();\n      doubleClickZoom.disable(ctx);\n      ctx.ui.queueMapClasses({ mouse: Constants.cursors.ADD });\n      ctx.ui.setActiveButton(Constants.types.LINE);\n      this.on('mousemove', CommonSelectors.true, (e) => {\n        line.updateCoordinate(currentVertexPosition, e.lngLat.lng, e.lngLat.lat);\n        if (CommonSelectors.isVertex(e)) {\n          ctx.ui.queueMapClasses({ mouse: Constants.cursors.POINTER });\n        }\n      });\n      this.on('click', CommonSelectors.true, (e) => {\n        if (currentVertexPosition > 0 && isEventAtCoordinates(e, line.coordinates[currentVertexPosition - 1])) {\n          return ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, { featureIds: [line.id] });\n        }\n        ctx.ui.queueMapClasses({ mouse: Constants.cursors.ADD });\n        line.updateCoordinate(currentVertexPosition, e.lngLat.lng, e.lngLat.lat);\n        currentVertexPosition++;\n      });\n      this.on('click', CommonSelectors.isVertex, () => {\n        return ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, { featureIds: [line.id] });\n      });\n      this.on('keyup', CommonSelectors.isEscapeKey, () => {\n        ctx.store.delete([line.id], { silent: true });\n        ctx.events.changeMode(Constants.modes.SIMPLE_SELECT);\n      });\n      this.on('keyup', CommonSelectors.isEnterKey, () => {\n        ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, { featureIds: [line.id] });\n      });\n      ctx.events.actionable({\n        combineFeatures: false,\n        uncombineFeatures: false,\n        trash: true\n      });\n    },\n\n    stop() {\n      doubleClickZoom.enable(ctx);\n      ctx.ui.setActiveButton();\n\n      // check to see if we've deleted this feature\n      if (ctx.store.get(line.id) === undefined) return;\n\n      //remove last added coordinate\n      line.removeCoordinate(`${currentVertexPosition}`);\n      if (line.isValid()) {\n        ctx.map.fire(Constants.events.CREATE, {\n          features: [line.toGeoJSON()]\n        });\n      } else {\n        ctx.store.delete([line.id], { silent: true });\n        ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, {}, { silent: true });\n      }\n    },\n\n    render(geojson, callback) {\n      const isActiveLine = geojson.properties.id === line.id;\n      geojson.properties.active = (isActiveLine) ? Constants.activeStates.ACTIVE : Constants.activeStates.INACTIVE;\n      if (!isActiveLine) return callback(geojson);\n\n      // Only render the line if it has at least one real coordinate\n      if (geojson.geometry.coordinates.length < 2) return;\n      geojson.properties.meta = Constants.meta.FEATURE;\n\n      if (geojson.geometry.coordinates.length >= 3) {\n        callback(createVertex(line.id, geojson.geometry.coordinates[geojson.geometry.coordinates.length - 2], `${geojson.geometry.coordinates.length - 2}`, false));\n      }\n\n      callback(geojson);\n    },\n\n    trash() {\n      ctx.store.delete([line.id], { silent: true });\n      ctx.events.changeMode(Constants.modes.SIMPLE_SELECT);\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"script"}