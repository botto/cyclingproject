{"ast":null,"code":"const ModeHandler = function (mode, DrawContext) {\n  const handlers = {\n    drag: [],\n    click: [],\n    mousemove: [],\n    mousedown: [],\n    mouseup: [],\n    mouseout: [],\n    keydown: [],\n    keyup: []\n  };\n  const ctx = {\n    on: function (event, selector, fn) {\n      if (handlers[event] === undefined) {\n        throw new Error(`Invalid event type: ${event}`);\n      }\n\n      handlers[event].push({\n        selector: selector,\n        fn: fn\n      });\n    },\n    render: function (id) {\n      DrawContext.store.featureChanged(id);\n    }\n  };\n\n  const delegate = function (eventName, event) {\n    const handles = handlers[eventName];\n    let iHandle = handles.length;\n\n    while (iHandle--) {\n      const handle = handles[iHandle];\n\n      if (handle.selector(event)) {\n        handle.fn.call(ctx, event);\n        DrawContext.store.render();\n        DrawContext.ui.updateMapClasses(); // ensure an event is only handled once\n        // we do this to let modes have multiple overlapping selectors\n        // and relay on order of oppertations to filter\n\n        break;\n      }\n    }\n  };\n\n  mode.start.call(ctx);\n  return {\n    render: mode.render,\n    stop: function () {\n      if (mode.stop) mode.stop();\n    },\n    trash: function () {\n      if (mode.trash) {\n        mode.trash();\n        DrawContext.store.render();\n      }\n    },\n    combineFeatures: function () {\n      if (mode.combineFeatures) {\n        mode.combineFeatures();\n      }\n    },\n    uncombineFeatures: function () {\n      if (mode.uncombineFeatures) {\n        mode.uncombineFeatures();\n      }\n    },\n    drag: function (event) {\n      delegate('drag', event);\n    },\n    click: function (event) {\n      delegate('click', event);\n    },\n    mousemove: function (event) {\n      delegate('mousemove', event);\n    },\n    mousedown: function (event) {\n      delegate('mousedown', event);\n    },\n    mouseup: function (event) {\n      delegate('mouseup', event);\n    },\n    mouseout: function (event) {\n      delegate('mouseout', event);\n    },\n    keydown: function (event) {\n      delegate('keydown', event);\n    },\n    keyup: function (event) {\n      delegate('keyup', event);\n    }\n  };\n};\n\nmodule.exports = ModeHandler;","map":{"version":3,"sources":["/home/jfrank/Ironhack/LastProject/cyclingproject/mapbox-react-tutorial/mapboxAndReact/node_modules/mapbox-gl-draw/src/lib/mode_handler.js"],"names":["ModeHandler","mode","DrawContext","handlers","drag","click","mousemove","mousedown","mouseup","mouseout","keydown","keyup","ctx","on","event","selector","fn","undefined","Error","push","render","id","store","featureChanged","delegate","eventName","handles","iHandle","length","handle","call","ui","updateMapClasses","start","stop","trash","combineFeatures","uncombineFeatures","module","exports"],"mappings":"AACA,MAAMA,WAAW,GAAG,UAASC,IAAT,EAAeC,WAAf,EAA4B;AAE9C,QAAMC,QAAQ,GAAG;AACfC,IAAAA,IAAI,EAAE,EADS;AAEfC,IAAAA,KAAK,EAAE,EAFQ;AAGfC,IAAAA,SAAS,EAAE,EAHI;AAIfC,IAAAA,SAAS,EAAE,EAJI;AAKfC,IAAAA,OAAO,EAAE,EALM;AAMfC,IAAAA,QAAQ,EAAE,EANK;AAOfC,IAAAA,OAAO,EAAE,EAPM;AAQfC,IAAAA,KAAK,EAAE;AARQ,GAAjB;AAWA,QAAMC,GAAG,GAAG;AACVC,IAAAA,EAAE,EAAE,UAASC,KAAT,EAAgBC,QAAhB,EAA0BC,EAA1B,EAA8B;AAChC,UAAIb,QAAQ,CAACW,KAAD,CAAR,KAAoBG,SAAxB,EAAmC;AACjC,cAAM,IAAIC,KAAJ,CAAW,uBAAsBJ,KAAM,EAAvC,CAAN;AACD;;AACDX,MAAAA,QAAQ,CAACW,KAAD,CAAR,CAAgBK,IAAhB,CAAqB;AACnBJ,QAAAA,QAAQ,EAAEA,QADS;AAEnBC,QAAAA,EAAE,EAAEA;AAFe,OAArB;AAID,KATS;AAUVI,IAAAA,MAAM,EAAE,UAASC,EAAT,EAAa;AACnBnB,MAAAA,WAAW,CAACoB,KAAZ,CAAkBC,cAAlB,CAAiCF,EAAjC;AACD;AAZS,GAAZ;;AAeA,QAAMG,QAAQ,GAAG,UAAUC,SAAV,EAAqBX,KAArB,EAA4B;AAC3C,UAAMY,OAAO,GAAGvB,QAAQ,CAACsB,SAAD,CAAxB;AACA,QAAIE,OAAO,GAAGD,OAAO,CAACE,MAAtB;;AACA,WAAOD,OAAO,EAAd,EAAkB;AAChB,YAAME,MAAM,GAAGH,OAAO,CAACC,OAAD,CAAtB;;AACA,UAAIE,MAAM,CAACd,QAAP,CAAgBD,KAAhB,CAAJ,EAA4B;AAC1Be,QAAAA,MAAM,CAACb,EAAP,CAAUc,IAAV,CAAelB,GAAf,EAAoBE,KAApB;AACAZ,QAAAA,WAAW,CAACoB,KAAZ,CAAkBF,MAAlB;AACAlB,QAAAA,WAAW,CAAC6B,EAAZ,CAAeC,gBAAf,GAH0B,CAK1B;AACA;AACA;;AACA;AACD;AACF;AACF,GAhBD;;AAkBA/B,EAAAA,IAAI,CAACgC,KAAL,CAAWH,IAAX,CAAgBlB,GAAhB;AAEA,SAAO;AACLQ,IAAAA,MAAM,EAAEnB,IAAI,CAACmB,MADR;AAELc,IAAAA,IAAI,EAAE,YAAW;AACf,UAAIjC,IAAI,CAACiC,IAAT,EAAejC,IAAI,CAACiC,IAAL;AAChB,KAJI;AAKLC,IAAAA,KAAK,EAAE,YAAW;AAChB,UAAIlC,IAAI,CAACkC,KAAT,EAAgB;AACdlC,QAAAA,IAAI,CAACkC,KAAL;AACAjC,QAAAA,WAAW,CAACoB,KAAZ,CAAkBF,MAAlB;AACD;AACF,KAVI;AAWLgB,IAAAA,eAAe,EAAE,YAAW;AAC1B,UAAInC,IAAI,CAACmC,eAAT,EAA0B;AACxBnC,QAAAA,IAAI,CAACmC,eAAL;AACD;AACF,KAfI;AAgBLC,IAAAA,iBAAiB,EAAE,YAAW;AAC5B,UAAIpC,IAAI,CAACoC,iBAAT,EAA4B;AAC1BpC,QAAAA,IAAI,CAACoC,iBAAL;AACD;AACF,KApBI;AAqBLjC,IAAAA,IAAI,EAAE,UAASU,KAAT,EAAgB;AACpBU,MAAAA,QAAQ,CAAC,MAAD,EAASV,KAAT,CAAR;AACD,KAvBI;AAwBLT,IAAAA,KAAK,EAAE,UAASS,KAAT,EAAgB;AACrBU,MAAAA,QAAQ,CAAC,OAAD,EAAUV,KAAV,CAAR;AACD,KA1BI;AA2BLR,IAAAA,SAAS,EAAE,UAASQ,KAAT,EAAgB;AACzBU,MAAAA,QAAQ,CAAC,WAAD,EAAcV,KAAd,CAAR;AACD,KA7BI;AA8BLP,IAAAA,SAAS,EAAE,UAASO,KAAT,EAAgB;AACzBU,MAAAA,QAAQ,CAAC,WAAD,EAAcV,KAAd,CAAR;AACD,KAhCI;AAiCLN,IAAAA,OAAO,EAAE,UAASM,KAAT,EAAgB;AACvBU,MAAAA,QAAQ,CAAC,SAAD,EAAYV,KAAZ,CAAR;AACD,KAnCI;AAoCLL,IAAAA,QAAQ,EAAE,UAASK,KAAT,EAAgB;AACxBU,MAAAA,QAAQ,CAAC,UAAD,EAAaV,KAAb,CAAR;AACD,KAtCI;AAuCLJ,IAAAA,OAAO,EAAE,UAASI,KAAT,EAAgB;AACvBU,MAAAA,QAAQ,CAAC,SAAD,EAAYV,KAAZ,CAAR;AACD,KAzCI;AA0CLH,IAAAA,KAAK,EAAE,UAASG,KAAT,EAAgB;AACrBU,MAAAA,QAAQ,CAAC,OAAD,EAAUV,KAAV,CAAR;AACD;AA5CI,GAAP;AA8CD,CA9FD;;AAgGAwB,MAAM,CAACC,OAAP,GAAiBvC,WAAjB","sourcesContent":["\nconst ModeHandler = function(mode, DrawContext) {\n\n  const handlers = {\n    drag: [],\n    click: [],\n    mousemove: [],\n    mousedown: [],\n    mouseup: [],\n    mouseout: [],\n    keydown: [],\n    keyup: []\n  };\n\n  const ctx = {\n    on: function(event, selector, fn) {\n      if (handlers[event] === undefined) {\n        throw new Error(`Invalid event type: ${event}`);\n      }\n      handlers[event].push({\n        selector: selector,\n        fn: fn\n      });\n    },\n    render: function(id) {\n      DrawContext.store.featureChanged(id);\n    }\n  };\n\n  const delegate = function (eventName, event) {\n    const handles = handlers[eventName];\n    let iHandle = handles.length;\n    while (iHandle--) {\n      const handle = handles[iHandle];\n      if (handle.selector(event)) {\n        handle.fn.call(ctx, event);\n        DrawContext.store.render();\n        DrawContext.ui.updateMapClasses();\n\n        // ensure an event is only handled once\n        // we do this to let modes have multiple overlapping selectors\n        // and relay on order of oppertations to filter\n        break;\n      }\n    }\n  };\n\n  mode.start.call(ctx);\n\n  return {\n    render: mode.render,\n    stop: function() {\n      if (mode.stop) mode.stop();\n    },\n    trash: function() {\n      if (mode.trash) {\n        mode.trash();\n        DrawContext.store.render();\n      }\n    },\n    combineFeatures: function() {\n      if (mode.combineFeatures) {\n        mode.combineFeatures();\n      }\n    },\n    uncombineFeatures: function() {\n      if (mode.uncombineFeatures) {\n        mode.uncombineFeatures();\n      }\n    },\n    drag: function(event) {\n      delegate('drag', event);\n    },\n    click: function(event) {\n      delegate('click', event);\n    },\n    mousemove: function(event) {\n      delegate('mousemove', event);\n    },\n    mousedown: function(event) {\n      delegate('mousedown', event);\n    },\n    mouseup: function(event) {\n      delegate('mouseup', event);\n    },\n    mouseout: function(event) {\n      delegate('mouseout', event);\n    },\n    keydown: function(event) {\n      delegate('keydown', event);\n    },\n    keyup: function(event) {\n      delegate('keyup', event);\n    }\n  };\n};\n\nmodule.exports = ModeHandler;\n"]},"metadata":{},"sourceType":"script"}