{"ast":null,"code":"const throttle = require('./lib/throttle');\n\nconst toDenseArray = require('./lib/to_dense_array');\n\nconst StringSet = require('./lib/string_set');\n\nconst render = require('./render');\n\nconst Store = module.exports = function (ctx) {\n  this._features = {};\n  this._featureIds = new StringSet();\n  this._selectedFeatureIds = new StringSet();\n  this._changedFeatureIds = new StringSet();\n  this._deletedFeaturesToEmit = [];\n  this._emitSelectionChange = false;\n  this.ctx = ctx;\n  this.sources = {\n    hot: [],\n    cold: []\n  };\n  this.render = throttle(render, 16, this);\n  this.isDirty = false;\n};\n/**\n * Delays all rendering until the returned function is invoked\n * @return {Function} renderBatch\n */\n\n\nStore.prototype.createRenderBatch = function () {\n  const holdRender = this.render;\n  let numRenders = 0;\n\n  this.render = function () {\n    numRenders++;\n  };\n\n  return () => {\n    this.render = holdRender;\n\n    if (numRenders > 0) {\n      this.render();\n    }\n  };\n};\n/**\n * Sets the store's state to dirty.\n * @return {Store} this\n */\n\n\nStore.prototype.setDirty = function () {\n  this.isDirty = true;\n  return this;\n};\n/**\n * Sets a feature's state to changed.\n * @param {string} featureId\n * @return {Store} this\n */\n\n\nStore.prototype.featureChanged = function (featureId) {\n  this._changedFeatureIds.add(featureId);\n\n  return this;\n};\n/**\n * Gets the ids of all features currently in changed state.\n * @return {Store} this\n */\n\n\nStore.prototype.getChangedIds = function () {\n  return this._changedFeatureIds.values();\n};\n/**\n * Sets all features to unchanged state.\n * @return {Store} this\n */\n\n\nStore.prototype.clearChangedIds = function () {\n  this._changedFeatureIds.clear();\n\n  return this;\n};\n/**\n * Gets the ids of all features in the store.\n * @return {Store} this\n */\n\n\nStore.prototype.getAllIds = function () {\n  return this._featureIds.values();\n};\n/**\n * Adds a feature to the store.\n * @param {Object} feature\n *\n * @return {Store} this\n */\n\n\nStore.prototype.add = function (feature) {\n  this.featureChanged(feature.id);\n  this._features[feature.id] = feature;\n\n  this._featureIds.add(feature.id);\n\n  return this;\n};\n/**\n * Deletes a feature or array of features from the store.\n * Cleans up after the deletion by deselecting the features.\n * If changes were made, sets the state to the dirty\n * and fires an event.\n * @param {string | Array<string>} featureIds\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n * @return {Store} this\n */\n\n\nStore.prototype.delete = function (featureIds, options = {}) {\n  toDenseArray(featureIds).forEach(id => {\n    if (!this._featureIds.has(id)) return;\n\n    this._featureIds.delete(id);\n\n    this._selectedFeatureIds.delete(id);\n\n    if (!options.silent) {\n      if (this._deletedFeaturesToEmit.indexOf(this._features[id]) === -1) {\n        this._deletedFeaturesToEmit.push(this._features[id]);\n      }\n    }\n\n    delete this._features[id];\n    this.isDirty = true;\n  });\n  return this;\n};\n/**\n * Returns a feature in the store matching the specified value.\n * @return {Object | undefined} feature\n */\n\n\nStore.prototype.get = function (id) {\n  return this._features[id];\n};\n/**\n * Returns all features in the store.\n * @return {Array<Object>}\n */\n\n\nStore.prototype.getAll = function () {\n  return Object.keys(this._features).map(id => this._features[id]);\n};\n/**\n * Adds features to the current selection.\n * @param {string | Array<string>} featureIds\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n * @return {Store} this\n */\n\n\nStore.prototype.select = function (featureIds, options = {}) {\n  toDenseArray(featureIds).forEach(id => {\n    if (this._selectedFeatureIds.has(id)) return;\n\n    this._selectedFeatureIds.add(id);\n\n    this._changedFeatureIds.add(id);\n\n    if (!options.silent) {\n      this._emitSelectionChange = true;\n    }\n  });\n  return this;\n};\n/**\n * Deletes features from the current selection.\n * @param {string | Array<string>} featureIds\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n * @return {Store} this\n */\n\n\nStore.prototype.deselect = function (featureIds, options = {}) {\n  toDenseArray(featureIds).forEach(id => {\n    if (!this._selectedFeatureIds.has(id)) return;\n\n    this._selectedFeatureIds.delete(id);\n\n    this._changedFeatureIds.add(id);\n\n    if (!options.silent) {\n      this._emitSelectionChange = true;\n    }\n  });\n  return this;\n};\n/**\n * Clears the current selection.\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n * @return {Store} this\n */\n\n\nStore.prototype.clearSelected = function (options = {}) {\n  this.deselect(this._selectedFeatureIds.values(), {\n    silent: options.silent\n  });\n  return this;\n};\n/**\n * Sets the store's selection, clearing any prior values.\n * If no feature ids are passed, the store is just cleared.\n * @param {string | Array<string> | undefined} featureIds\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n * @return {Store} this\n */\n\n\nStore.prototype.setSelected = function (featureIds, options = {}) {\n  featureIds = toDenseArray(featureIds); // Deselect any features not in the new selection\n\n  this.deselect(this._selectedFeatureIds.values().filter(id => {\n    return featureIds.indexOf(id) === -1;\n  }), {\n    silent: options.silent\n  }); // Select any features in the new selection that were not already selected\n\n  this.select(featureIds.filter(id => {\n    return !this._selectedFeatureIds.has(id);\n  }), {\n    silent: options.silent\n  });\n  return this;\n};\n/**\n * Returns the ids of features in the current selection.\n * @return {Array<string>} Selected feature ids.\n */\n\n\nStore.prototype.getSelectedIds = function () {\n  return this._selectedFeatureIds.values();\n};\n/**\n * Returns features in the current selection.\n * @return {Array<Object>} Selected features.\n */\n\n\nStore.prototype.getSelected = function () {\n  return this._selectedFeatureIds.values().map(id => this.get(id));\n};\n/**\n * Indicates whether a feature is selected.\n * @param {string} featureId\n * @return {boolean} `true` if the feature is selected, `false` if not.\n */\n\n\nStore.prototype.isSelected = function (featureId) {\n  return this._selectedFeatureIds.has(featureId);\n};\n/**\n * Sets a property on the given feature\n * @param {string} featureId\n * @param {string} property property\n * @param {string} property value\n*/\n\n\nStore.prototype.setFeatureProperty = function (featureId, property, value) {\n  this.get(featureId).setProperty(property, value);\n  this.featureChanged(featureId);\n};","map":{"version":3,"sources":["/home/jfrank/Ironhack/LastProject/cyclingproject/mapbox-react-tutorial/mapboxAndReact/node_modules/mapbox-gl-draw/src/store.js"],"names":["throttle","require","toDenseArray","StringSet","render","Store","module","exports","ctx","_features","_featureIds","_selectedFeatureIds","_changedFeatureIds","_deletedFeaturesToEmit","_emitSelectionChange","sources","hot","cold","isDirty","prototype","createRenderBatch","holdRender","numRenders","setDirty","featureChanged","featureId","add","getChangedIds","values","clearChangedIds","clear","getAllIds","feature","id","delete","featureIds","options","forEach","has","silent","indexOf","push","get","getAll","Object","keys","map","select","deselect","clearSelected","setSelected","filter","getSelectedIds","getSelected","isSelected","setFeatureProperty","property","value","setProperty"],"mappings":"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","sourcesContent":["const throttle = require('./lib/throttle');\nconst toDenseArray = require('./lib/to_dense_array');\nconst StringSet = require('./lib/string_set');\nconst render = require('./render');\n\nconst Store = module.exports = function(ctx) {\n  this._features = {};\n  this._featureIds = new StringSet();\n  this._selectedFeatureIds = new StringSet();\n  this._changedFeatureIds = new StringSet();\n  this._deletedFeaturesToEmit = [];\n  this._emitSelectionChange = false;\n  this.ctx = ctx;\n  this.sources = {\n    hot: [],\n    cold: []\n  };\n  this.render = throttle(render, 16, this);\n  this.isDirty = false;\n};\n\n\n/**\n * Delays all rendering until the returned function is invoked\n * @return {Function} renderBatch\n */\nStore.prototype.createRenderBatch = function() {\n  const holdRender = this.render;\n  let numRenders = 0;\n  this.render = function() {\n    numRenders++;\n  };\n\n  return () => {\n    this.render = holdRender;\n    if (numRenders > 0) {\n      this.render();\n    }\n  };\n};\n\n/**\n * Sets the store's state to dirty.\n * @return {Store} this\n */\nStore.prototype.setDirty = function() {\n  this.isDirty = true;\n  return this;\n};\n\n/**\n * Sets a feature's state to changed.\n * @param {string} featureId\n * @return {Store} this\n */\nStore.prototype.featureChanged = function(featureId) {\n  this._changedFeatureIds.add(featureId);\n  return this;\n};\n\n/**\n * Gets the ids of all features currently in changed state.\n * @return {Store} this\n */\nStore.prototype.getChangedIds = function() {\n  return this._changedFeatureIds.values();\n};\n\n/**\n * Sets all features to unchanged state.\n * @return {Store} this\n */\nStore.prototype.clearChangedIds = function() {\n  this._changedFeatureIds.clear();\n  return this;\n};\n\n/**\n * Gets the ids of all features in the store.\n * @return {Store} this\n */\nStore.prototype.getAllIds = function() {\n  return this._featureIds.values();\n};\n\n/**\n * Adds a feature to the store.\n * @param {Object} feature\n *\n * @return {Store} this\n */\nStore.prototype.add = function(feature) {\n  this.featureChanged(feature.id);\n  this._features[feature.id] = feature;\n  this._featureIds.add(feature.id);\n  return this;\n};\n\n/**\n * Deletes a feature or array of features from the store.\n * Cleans up after the deletion by deselecting the features.\n * If changes were made, sets the state to the dirty\n * and fires an event.\n * @param {string | Array<string>} featureIds\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n * @return {Store} this\n */\nStore.prototype.delete = function(featureIds, options = {}) {\n  toDenseArray(featureIds).forEach(id => {\n    if (!this._featureIds.has(id)) return;\n    this._featureIds.delete(id);\n    this._selectedFeatureIds.delete(id);\n    if (!options.silent) {\n      if (this._deletedFeaturesToEmit.indexOf(this._features[id]) === -1) {\n        this._deletedFeaturesToEmit.push(this._features[id]);\n      }\n    }\n    delete this._features[id];\n    this.isDirty = true;\n  });\n  return this;\n};\n\n/**\n * Returns a feature in the store matching the specified value.\n * @return {Object | undefined} feature\n */\nStore.prototype.get = function(id) {\n  return this._features[id];\n};\n\n/**\n * Returns all features in the store.\n * @return {Array<Object>}\n */\nStore.prototype.getAll = function() {\n  return Object.keys(this._features).map(id => this._features[id]);\n};\n\n/**\n * Adds features to the current selection.\n * @param {string | Array<string>} featureIds\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n * @return {Store} this\n */\nStore.prototype.select = function(featureIds, options = {}) {\n  toDenseArray(featureIds).forEach(id => {\n    if (this._selectedFeatureIds.has(id)) return;\n    this._selectedFeatureIds.add(id);\n    this._changedFeatureIds.add(id);\n    if (!options.silent) {\n      this._emitSelectionChange = true;\n    }\n  });\n  return this;\n};\n\n/**\n * Deletes features from the current selection.\n * @param {string | Array<string>} featureIds\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n * @return {Store} this\n */\nStore.prototype.deselect = function(featureIds, options = {}) {\n  toDenseArray(featureIds).forEach(id => {\n    if (!this._selectedFeatureIds.has(id)) return;\n    this._selectedFeatureIds.delete(id);\n    this._changedFeatureIds.add(id);\n    if (!options.silent) {\n      this._emitSelectionChange = true;\n    }\n  });\n  return this;\n};\n\n/**\n * Clears the current selection.\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n * @return {Store} this\n */\nStore.prototype.clearSelected = function(options = {}) {\n  this.deselect(this._selectedFeatureIds.values(), { silent: options.silent });\n  return this;\n};\n\n/**\n * Sets the store's selection, clearing any prior values.\n * If no feature ids are passed, the store is just cleared.\n * @param {string | Array<string> | undefined} featureIds\n * @param {Object} [options]\n * @param {Object} [options.silent] - If `true`, this invocation will not fire an event.\n * @return {Store} this\n */\nStore.prototype.setSelected = function(featureIds, options = {}) {\n  featureIds = toDenseArray(featureIds);\n\n  // Deselect any features not in the new selection\n  this.deselect(this._selectedFeatureIds.values().filter(id => {\n    return featureIds.indexOf(id) === -1;\n  }), { silent: options.silent });\n\n  // Select any features in the new selection that were not already selected\n  this.select(featureIds.filter(id => {\n    return !this._selectedFeatureIds.has(id);\n  }), { silent: options.silent });\n\n  return this;\n};\n\n/**\n * Returns the ids of features in the current selection.\n * @return {Array<string>} Selected feature ids.\n */\nStore.prototype.getSelectedIds = function() {\n  return this._selectedFeatureIds.values();\n};\n\n/**\n * Returns features in the current selection.\n * @return {Array<Object>} Selected features.\n */\nStore.prototype.getSelected = function() {\n  return this._selectedFeatureIds.values().map(id => this.get(id));\n};\n\n/**\n * Indicates whether a feature is selected.\n * @param {string} featureId\n * @return {boolean} `true` if the feature is selected, `false` if not.\n */\nStore.prototype.isSelected = function(featureId) {\n  return this._selectedFeatureIds.has(featureId);\n};\n\n/**\n * Sets a property on the given feature\n * @param {string} featureId\n * @param {string} property property\n * @param {string} property value\n*/\nStore.prototype.setFeatureProperty = function(featureId, property, value) {\n  this.get(featureId).setProperty(property, value);\n  this.featureChanged(featureId);\n};\n"]},"metadata":{},"sourceType":"script"}