{"ast":null,"code":"var _jsxFileName = \"/home/jfrank/Ironhack/LastProject/cyclingproject/mapbox-react-tutorial/mapboxAndReact/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\nimport MapBoxGLDraw from 'mapbox-gl-draw';\nmapboxgl.accessToken = 'pk.eyJ1IjoiamFjcXVlbGluZWNoZW4iLCJhIjoiY2s2ZHB5Y2RxMDkxbzNkbXA2bXVzM3JvbiJ9.pUyDxtMWjGqmGgX4JAdL7g';\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      map: null,\n      draw: null,\n      lng: 5,\n      lat: 34,\n      zoom: 4\n    };\n\n    this.removeRoute = () => {\n      if (this.state.map.getSource('route')) {\n        this.state.map.removeLayer('route');\n        this.state.map.removeSource('route');\n        document.getElementById('calculated-line').innerHTML = '';\n      } else {\n        return;\n      }\n    };\n\n    this.updateRoute = () => {\n      this.removeRoute(); // overwrite any existing layers\n\n      let data = this.state.draw.getAll();\n      let answer = document.getElementById('calculated-line');\n      let lastFeature = data.features.length - 1;\n      let coords = data.features[lastFeature].geometry.coordinates;\n      let newCoords = coords.join(';');\n      this.getMatch(newCoords);\n    };\n\n    this.getMatch = e => {\n      let url = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + e + '?geometries=geojson&steps=true&&access_token=' + mapboxgl.accessToken;\n      let req = new XMLHttpRequest();\n      console.log('req', req);\n      req.responseType = 'json';\n      req.open('GET', url, true);\n\n      req.onload = () => {\n        let jsonResponse = req.response;\n        console.log('jsonReponse', jsonResponse);\n        let distance = jsonResponse.routes[0].distance * 0.001;\n        let duration = jsonResponse.routes[0].duration / 60;\n        console.log(jsonResponse); // document.getElementById('calculated-line').innerHTML =\n        // 'Distance: ' + distance.toFixed(2) + ' km<br>Duration: ' + duration.toFixed(2) + ' minutes';\n\n        let coords = jsonResponse.routes[0].geometry; // add the route to the map\n\n        this.addRoute(coords);\n        this.getInstructions(jsonResponse.routes[0]);\n      };\n\n      req.send();\n    };\n\n    this.addRoute = coords => {\n      // check if the route is already loaded\n      if (this.state.map.getSource('route')) {\n        this.state.map.removeLayer('route');\n        this.state.map.removeSource('route');\n      } else {\n        this.state.map.addLayer({\n          id: 'route',\n          type: 'line',\n          source: {\n            type: 'geojson',\n            data: {\n              type: 'Feature',\n              properties: {},\n              geometry: coords\n            }\n          },\n          layout: {\n            'line-join': 'round',\n            'line-cap': 'round'\n          },\n          paint: {\n            'line-color': '#3b9ddd',\n            'line-width': 8,\n            'line-opacity': 0.8\n          }\n        });\n      }\n    };\n\n    this.componentDidMount = () => {\n      const map = new mapboxgl.Map({\n        container: this.mapContainer,\n        style: 'mapbox://styles/mapbox/streets-v11',\n        center: [this.state.lng, this.state.lat],\n        zoom: this.state.zoom\n      });\n      const draw = new MapBoxGLDraw({\n        displayControlsDefault: false,\n        controls: {\n          line_string: true,\n          trash: true\n        },\n        styles: [// ACTIVE (being drawn)\n        // line stroke\n        {\n          id: 'gl-draw-line',\n          type: 'line',\n          filter: ['all', ['==', '$type', 'LineString'], ['!=', 'mode', 'static']],\n          layout: {\n            'line-cap': 'round',\n            'line-join': 'round'\n          },\n          paint: {\n            'line-color': '#3b9ddd',\n            'line-dasharray': [0.2, 2],\n            'line-width': 4,\n            'line-opacity': 0.7\n          }\n        }, // vertex point halos\n        {\n          id: 'gl-draw-polygon-and-line-vertex-halo-active',\n          type: 'circle',\n          filter: ['all', ['==', 'meta', 'vertex'], ['==', '$type', 'Point'], ['!=', 'mode', 'static']],\n          paint: {\n            'circle-radius': 10,\n            'circle-color': '#FFF'\n          }\n        }, // vertex points\n        {\n          id: 'gl-draw-polygon-and-line-vertex-active',\n          type: 'circle',\n          filter: ['all', ['==', 'meta', 'vertex'], ['==', '$type', 'Point'], ['!=', 'mode', 'static']],\n          paint: {\n            'circle-radius': 6,\n            'circle-color': '#3b9ddd'\n          }\n        }]\n      });\n      this.setState({\n        map,\n        draw\n      }, () => {\n        const {\n          map,\n          draw\n        } = this.state; // add the draw tool to the map\n\n        map.addControl(draw); // add create, update, or delete actions\n\n        map.on('draw.create', this.updateRoute);\n        map.on('draw.update', this.updateRoute);\n        map.on('draw.delete', this.removeRoute); // Storing new coordinate (whatever the user interacts with)\n\n        map.on('move', () => {\n          this.setState({\n            lng: map.getCenter().lng.toFixed(4),\n            lat: map.getCenter().lat.toFixed(4),\n            zoom: map.getZoom().toFixed(2)\n          });\n        });\n      });\n    };\n  }\n\n  render() {\n    console.log(this.state.map);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sidebarStyle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, \"Longitude: \", this.state.lng, \" | Latitude: \", this.state.lat, \" | Zoom: \", this.state.zoom)), React.createElement(\"div\", {\n      ref: el => this.mapContainer = el,\n      className: \"mapContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }));\n  }\n\n}\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 209\n  },\n  __self: this\n}), document.getElementById('app'));","map":{"version":3,"sources":["/home/jfrank/Ironhack/LastProject/cyclingproject/mapbox-react-tutorial/mapboxAndReact/src/index.js"],"names":["React","ReactDOM","mapboxgl","MapBoxGLDraw","accessToken","App","Component","state","map","draw","lng","lat","zoom","removeRoute","getSource","removeLayer","removeSource","document","getElementById","innerHTML","updateRoute","data","getAll","answer","lastFeature","features","length","coords","geometry","coordinates","newCoords","join","getMatch","e","url","req","XMLHttpRequest","console","log","responseType","open","onload","jsonResponse","response","distance","routes","duration","addRoute","getInstructions","send","addLayer","id","type","source","properties","layout","paint","componentDidMount","Map","container","mapContainer","style","center","displayControlsDefault","controls","line_string","trash","styles","filter","setState","addControl","on","getCenter","toFixed","getZoom","render","el"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\nimport MapBoxGLDraw from 'mapbox-gl-draw';\n\nmapboxgl.accessToken =\n  'pk.eyJ1IjoiamFjcXVlbGluZWNoZW4iLCJhIjoiY2s2ZHB5Y2RxMDkxbzNkbXA2bXVzM3JvbiJ9.pUyDxtMWjGqmGgX4JAdL7g';\n\nclass App extends React.Component {\n  // constructor(props) {\n  //   super(props);\n  state = {\n    map: null,\n    draw: null,\n    lng: 5,\n    lat: 34,\n    zoom: 4,\n  };\n\n  //\n  removeRoute = () => {\n    if (this.state.map.getSource('route')) {\n      this.state.map.removeLayer('route');\n      this.state.map.removeSource('route');\n      document.getElementById('calculated-line').innerHTML = '';\n    } else {\n      return;\n    }\n  };\n\n  updateRoute = () => {\n    this.removeRoute(); // overwrite any existing layers\n    let data = this.state.draw.getAll();\n    let answer = document.getElementById('calculated-line');\n    let lastFeature = data.features.length - 1;\n    let coords = data.features[lastFeature].geometry.coordinates;\n    let newCoords = coords.join(';');\n    this.getMatch(newCoords);\n  };\n\n  getMatch = e => {\n    let url =\n      'https://api.mapbox.com/directions/v5/mapbox/cycling/' +\n      e +\n      '?geometries=geojson&steps=true&&access_token=' +\n      mapboxgl.accessToken;\n\n    let req = new XMLHttpRequest();\n    console.log('req', req);\n    req.responseType = 'json';\n    req.open('GET', url, true);\n    req.onload = () => {\n      let jsonResponse = req.response;\n      console.log('jsonReponse', jsonResponse);\n      let distance = jsonResponse.routes[0].distance * 0.001;\n      let duration = jsonResponse.routes[0].duration / 60;\n      console.log(jsonResponse);\n      // document.getElementById('calculated-line').innerHTML =\n      // 'Distance: ' + distance.toFixed(2) + ' km<br>Duration: ' + duration.toFixed(2) + ' minutes';\n      let coords = jsonResponse.routes[0].geometry;\n      // add the route to the map\n      this.addRoute(coords);\n      this.getInstructions(jsonResponse.routes[0]);\n    };\n    req.send();\n  };\n\n  addRoute = coords => {\n    // check if the route is already loaded\n    if (this.state.map.getSource('route')) {\n      this.state.map.removeLayer('route');\n      this.state.map.removeSource('route');\n    } else {\n      this.state.map.addLayer({\n        id: 'route',\n        type: 'line',\n        source: {\n          type: 'geojson',\n          data: {\n            type: 'Feature',\n            properties: {},\n            geometry: coords,\n          },\n        },\n        layout: {\n          'line-join': 'round',\n          'line-cap': 'round',\n        },\n        paint: {\n          'line-color': '#3b9ddd',\n          'line-width': 8,\n          'line-opacity': 0.8,\n        },\n      });\n    }\n  };\n\n  //   getInstructions(data) {\n  //     // Target the sidebar to add the instructions\n  //     let directions = document.getElementById(\"directions\");\n  //     let legs = data.legs;\n  //     let tripDirections = [];\n  //     // Output the instructions for each step of each leg in the response object\n  //     for (let i = 0; i < legs.length; i++) {\n  //       let steps = legs[i].steps;\n  //       for (let j = 0; j < steps.length; j++) {\n  //         tripDirections.push(\"<br><li>\" + steps[j].maneuver.instruction) +\n  //           \"</li>\";\n  //       }\n  //     }\n  //     directions.innerHTML =\n  //       \"<br><h2>Trip duration: \" +\n  //       Math.floor(data.duration / 60) +\n  //       \" min.</h2>\" +\n  //       tripDirections;\n  //   }\n\n  componentDidMount = () => {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom,\n    });\n    const draw = new MapBoxGLDraw({\n      displayControlsDefault: false,\n      controls: {\n        line_string: true,\n        trash: true,\n      },\n      styles: [\n        // ACTIVE (being drawn)\n        // line stroke\n        {\n          id: 'gl-draw-line',\n          type: 'line',\n          filter: ['all', ['==', '$type', 'LineString'], ['!=', 'mode', 'static']],\n          layout: {\n            'line-cap': 'round',\n            'line-join': 'round',\n          },\n          paint: {\n            'line-color': '#3b9ddd',\n            'line-dasharray': [0.2, 2],\n            'line-width': 4,\n            'line-opacity': 0.7,\n          },\n        },\n        // vertex point halos\n        {\n          id: 'gl-draw-polygon-and-line-vertex-halo-active',\n          type: 'circle',\n          filter: ['all', ['==', 'meta', 'vertex'], ['==', '$type', 'Point'], ['!=', 'mode', 'static']],\n          paint: {\n            'circle-radius': 10,\n            'circle-color': '#FFF',\n          },\n        },\n        // vertex points\n        {\n          id: 'gl-draw-polygon-and-line-vertex-active',\n          type: 'circle',\n          filter: ['all', ['==', 'meta', 'vertex'], ['==', '$type', 'Point'], ['!=', 'mode', 'static']],\n          paint: {\n            'circle-radius': 6,\n            'circle-color': '#3b9ddd',\n          },\n        },\n      ],\n    });\n\n    this.setState({ map, draw }, () => {\n      const { map, draw } = this.state;\n\n      // add the draw tool to the map\n      map.addControl(draw);\n\n      // add create, update, or delete actions\n      map.on('draw.create', this.updateRoute);\n      map.on('draw.update', this.updateRoute);\n      map.on('draw.delete', this.removeRoute);\n\n      // Storing new coordinate (whatever the user interacts with)\n      map.on('move', () => {\n        this.setState({\n          lng: map.getCenter().lng.toFixed(4),\n          lat: map.getCenter().lat.toFixed(4),\n          zoom: map.getZoom().toFixed(2),\n        });\n      });\n    });\n  };\n\n  render() {\n    console.log(this.state.map);\n    return (\n      <div>\n        <div className=\"sidebarStyle\">\n          <div>\n            Longitude: {this.state.lng} | Latitude: {this.state.lat} | Zoom: {this.state.zoom}\n          </div>\n        </div>\n        <div ref={el => (this.mapContainer = el)} className=\"mapContainer\" />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('app'));\n"]},"metadata":{},"sourceType":"module"}