{"ast":null,"code":"const xtend = require('xtend');\n\nconst Constants = require('./constants');\n\nconst classTypes = ['mode', 'feature', 'mouse'];\n\nmodule.exports = function (ctx) {\n  const buttonElements = {};\n  let activeButton = null;\n  let currentMapClasses = {\n    mode: null,\n    // e.g. mode-direct_select\n    feature: null,\n    // e.g. feature-vertex\n    mouse: null // e.g. mouse-move\n\n  };\n  let nextMapClasses = {\n    mode: null,\n    feature: null,\n    mouse: null\n  };\n\n  function queueMapClasses(options) {\n    nextMapClasses = xtend(nextMapClasses, options);\n  }\n\n  function updateMapClasses() {\n    if (!ctx.container) return;\n    const classesToRemove = [];\n    const classesToAdd = [];\n    classTypes.forEach(type => {\n      if (nextMapClasses[type] === currentMapClasses[type]) return;\n      classesToRemove.push(`${type}-${currentMapClasses[type]}`);\n\n      if (nextMapClasses[type] !== null) {\n        classesToAdd.push(`${type}-${nextMapClasses[type]}`);\n      }\n    });\n\n    if (classesToRemove.length > 0) {\n      ctx.container.classList.remove.apply(ctx.container.classList, classesToRemove);\n    }\n\n    if (classesToAdd.length > 0) {\n      ctx.container.classList.add.apply(ctx.container.classList, classesToAdd);\n    }\n\n    currentMapClasses = xtend(currentMapClasses, nextMapClasses);\n  }\n\n  function createControlButton(id, options = {}) {\n    const button = document.createElement('button');\n    button.className = `${Constants.classes.CONTROL_BUTTON} ${options.className}`;\n    button.setAttribute('title', options.title);\n    options.container.appendChild(button);\n    button.addEventListener('click', e => {\n      e.preventDefault();\n      e.stopPropagation();\n      const clickedButton = e.target;\n\n      if (clickedButton === activeButton) {\n        deactivateButtons();\n        return;\n      }\n\n      setActiveButton(id);\n      options.onActivate();\n    }, true);\n    return button;\n  }\n\n  function deactivateButtons() {\n    if (!activeButton) return;\n    activeButton.classList.remove(Constants.classes.ACTIVE_BUTTON);\n    activeButton = null;\n  }\n\n  function setActiveButton(id) {\n    deactivateButtons();\n    const button = buttonElements[id];\n    if (!button) return;\n\n    if (button && id !== 'trash') {\n      button.classList.add(Constants.classes.ACTIVE_BUTTON);\n      activeButton = button;\n    }\n  }\n\n  function addButtons() {\n    const controls = ctx.options.controls;\n    const controlGroup = document.createElement('div');\n    controlGroup.className = `${Constants.classes.CONTROL_GROUP} ${Constants.classes.CONTROL_BASE}`;\n    if (!controls) return controlGroup;\n\n    if (controls[Constants.types.LINE]) {\n      buttonElements[Constants.types.LINE] = createControlButton(Constants.types.LINE, {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_LINE,\n        title: `LineString tool ${ctx.options.keybindings && '(l)'}`,\n        onActivate: () => ctx.events.changeMode(Constants.modes.DRAW_LINE_STRING)\n      });\n    }\n\n    if (controls[Constants.types.POLYGON]) {\n      buttonElements[Constants.types.POLYGON] = createControlButton(Constants.types.POLYGON, {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_POLYGON,\n        title: `Polygon tool ${ctx.options.keybindings && '(p)'}`,\n        onActivate: () => ctx.events.changeMode(Constants.modes.DRAW_POLYGON)\n      });\n    }\n\n    if (controls[Constants.types.POINT]) {\n      buttonElements[Constants.types.POINT] = createControlButton(Constants.types.POINT, {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_POINT,\n        title: `Marker tool ${ctx.options.keybindings && '(m)'}`,\n        onActivate: () => ctx.events.changeMode(Constants.modes.DRAW_POINT)\n      });\n    }\n\n    if (controls.trash) {\n      buttonElements.trash = createControlButton('trash', {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_TRASH,\n        title: 'Delete',\n        onActivate: () => {\n          ctx.events.trash();\n        }\n      });\n    }\n\n    if (controls.combine_features) {\n      buttonElements.combine_features = createControlButton('combineFeatures', {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_COMBINE_FEATURES,\n        title: 'Combine',\n        onActivate: () => {\n          ctx.events.combineFeatures();\n        }\n      });\n    }\n\n    if (controls.uncombine_features) {\n      buttonElements.uncombine_features = createControlButton('uncombineFeatures', {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_UNCOMBINE_FEATURES,\n        title: 'Uncombine',\n        onActivate: () => {\n          ctx.events.uncombineFeatures();\n        }\n      });\n    }\n\n    return controlGroup;\n  }\n\n  function removeButtons() {\n    Object.keys(buttonElements).forEach(buttonId => {\n      const button = buttonElements[buttonId];\n\n      if (button.parentNode) {\n        button.parentNode.removeChild(button);\n      }\n\n      delete buttonElements[buttonId];\n    });\n  }\n\n  return {\n    setActiveButton,\n    queueMapClasses,\n    updateMapClasses,\n    addButtons,\n    removeButtons\n  };\n};","map":{"version":3,"sources":["/Users/jacquelinechen/Desktop/Mapbox/mapbox-react-tutorial/mapboxAndReact/node_modules/mapbox-gl-draw/src/ui.js"],"names":["xtend","require","Constants","classTypes","module","exports","ctx","buttonElements","activeButton","currentMapClasses","mode","feature","mouse","nextMapClasses","queueMapClasses","options","updateMapClasses","container","classesToRemove","classesToAdd","forEach","type","push","length","classList","remove","apply","add","createControlButton","id","button","document","createElement","className","classes","CONTROL_BUTTON","setAttribute","title","appendChild","addEventListener","e","preventDefault","stopPropagation","clickedButton","target","deactivateButtons","setActiveButton","onActivate","ACTIVE_BUTTON","addButtons","controls","controlGroup","CONTROL_GROUP","CONTROL_BASE","types","LINE","CONTROL_BUTTON_LINE","keybindings","events","changeMode","modes","DRAW_LINE_STRING","POLYGON","CONTROL_BUTTON_POLYGON","DRAW_POLYGON","POINT","CONTROL_BUTTON_POINT","DRAW_POINT","trash","CONTROL_BUTTON_TRASH","combine_features","CONTROL_BUTTON_COMBINE_FEATURES","combineFeatures","uncombine_features","CONTROL_BUTTON_UNCOMBINE_FEATURES","uncombineFeatures","removeButtons","Object","keys","buttonId","parentNode","removeChild"],"mappings":"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","sourcesContent":["const xtend = require('xtend');\nconst Constants = require('./constants');\n\nconst classTypes = ['mode', 'feature', 'mouse'];\n\nmodule.exports = function(ctx) {\n\n\n  const buttonElements = {};\n  let activeButton = null;\n\n  let currentMapClasses = {\n    mode: null, // e.g. mode-direct_select\n    feature: null, // e.g. feature-vertex\n    mouse: null // e.g. mouse-move\n  };\n\n  let nextMapClasses = {\n    mode: null,\n    feature: null,\n    mouse: null\n  };\n\n  function queueMapClasses(options) {\n    nextMapClasses = xtend(nextMapClasses, options);\n  }\n\n  function updateMapClasses() {\n    if (!ctx.container) return;\n\n    const classesToRemove = [];\n    const classesToAdd = [];\n\n    classTypes.forEach((type) => {\n      if (nextMapClasses[type] === currentMapClasses[type]) return;\n\n      classesToRemove.push(`${type}-${currentMapClasses[type]}`);\n      if (nextMapClasses[type] !== null) {\n        classesToAdd.push(`${type}-${nextMapClasses[type]}`);\n      }\n    });\n\n    if (classesToRemove.length > 0) {\n      ctx.container.classList.remove.apply(ctx.container.classList, classesToRemove);\n    }\n\n    if (classesToAdd.length > 0) {\n      ctx.container.classList.add.apply(ctx.container.classList, classesToAdd);\n    }\n\n    currentMapClasses = xtend(currentMapClasses, nextMapClasses);\n  }\n\n  function createControlButton(id, options = {}) {\n    const button = document.createElement('button');\n    button.className = `${Constants.classes.CONTROL_BUTTON} ${options.className}`;\n    button.setAttribute('title', options.title);\n    options.container.appendChild(button);\n\n    button.addEventListener('click', (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      const clickedButton = e.target;\n      if (clickedButton === activeButton) {\n        deactivateButtons();\n        return;\n      }\n\n      setActiveButton(id);\n      options.onActivate();\n    }, true);\n\n    return button;\n  }\n\n  function deactivateButtons() {\n    if (!activeButton) return;\n    activeButton.classList.remove(Constants.classes.ACTIVE_BUTTON);\n    activeButton = null;\n  }\n\n  function setActiveButton(id) {\n    deactivateButtons();\n\n    const button = buttonElements[id];\n    if (!button) return;\n\n    if (button && id !== 'trash') {\n      button.classList.add(Constants.classes.ACTIVE_BUTTON);\n      activeButton = button;\n    }\n  }\n\n  function addButtons() {\n    const controls = ctx.options.controls;\n    const controlGroup = document.createElement('div');\n    controlGroup.className = `${Constants.classes.CONTROL_GROUP} ${Constants.classes.CONTROL_BASE}`;\n\n    if (!controls) return controlGroup;\n\n    if (controls[Constants.types.LINE]) {\n      buttonElements[Constants.types.LINE] = createControlButton(Constants.types.LINE, {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_LINE,\n        title: `LineString tool ${ctx.options.keybindings && '(l)'}`,\n        onActivate: () => ctx.events.changeMode(Constants.modes.DRAW_LINE_STRING)\n      });\n    }\n\n    if (controls[Constants.types.POLYGON]) {\n      buttonElements[Constants.types.POLYGON] = createControlButton(Constants.types.POLYGON, {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_POLYGON,\n        title: `Polygon tool ${ctx.options.keybindings && '(p)'}`,\n        onActivate: () => ctx.events.changeMode(Constants.modes.DRAW_POLYGON)\n      });\n    }\n\n    if (controls[Constants.types.POINT]) {\n      buttonElements[Constants.types.POINT] = createControlButton(Constants.types.POINT, {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_POINT,\n        title: `Marker tool ${ctx.options.keybindings && '(m)'}`,\n        onActivate: () => ctx.events.changeMode(Constants.modes.DRAW_POINT)\n      });\n    }\n\n    if (controls.trash) {\n      buttonElements.trash = createControlButton('trash', {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_TRASH,\n        title: 'Delete',\n        onActivate: () => {\n          ctx.events.trash();\n        }\n      });\n    }\n\n    if (controls.combine_features) {\n      buttonElements.combine_features = createControlButton('combineFeatures', {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_COMBINE_FEATURES,\n        title: 'Combine',\n        onActivate: () => {\n          ctx.events.combineFeatures();\n        }\n      });\n    }\n\n    if (controls.uncombine_features) {\n      buttonElements.uncombine_features = createControlButton('uncombineFeatures', {\n        container: controlGroup,\n        className: Constants.classes.CONTROL_BUTTON_UNCOMBINE_FEATURES,\n        title: 'Uncombine',\n        onActivate: () => {\n          ctx.events.uncombineFeatures();\n        }\n      });\n    }\n\n    return controlGroup;\n  }\n\n  function removeButtons() {\n    Object.keys(buttonElements).forEach(buttonId => {\n      const button = buttonElements[buttonId];\n      if (button.parentNode) {\n        button.parentNode.removeChild(button);\n      }\n      delete buttonElements[buttonId];\n    });\n  }\n\n  return {\n    setActiveButton,\n    queueMapClasses,\n    updateMapClasses,\n    addButtons,\n    removeButtons\n  };\n};\n"]},"metadata":{},"sourceType":"script"}