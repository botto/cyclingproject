{"ast":null,"code":"const CommonSelectors = require('../lib/common_selectors');\n\nconst Point = require('../feature_types/point');\n\nconst Constants = require('../constants');\n\nmodule.exports = function (ctx) {\n  const point = new Point(ctx, {\n    type: Constants.geojsonTypes.FEATURE,\n    properties: {},\n    geometry: {\n      type: Constants.geojsonTypes.POINT,\n      coordinates: []\n    }\n  });\n  if (ctx._test) ctx._test.point = point;\n  ctx.store.add(point);\n\n  function stopDrawingAndRemove() {\n    ctx.events.changeMode(Constants.modes.SIMPLE_SELECT);\n    ctx.store.delete([point.id], {\n      silent: true\n    });\n  }\n\n  function handleClick(e) {\n    ctx.ui.queueMapClasses({\n      mouse: Constants.cursors.MOVE\n    });\n    point.updateCoordinate('', e.lngLat.lng, e.lngLat.lat);\n    ctx.map.fire(Constants.events.CREATE, {\n      features: [point.toGeoJSON()]\n    });\n    ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, {\n      featureIds: [point.id]\n    });\n  }\n\n  return {\n    start() {\n      ctx.store.clearSelected();\n      ctx.ui.queueMapClasses({\n        mouse: Constants.cursors.ADD\n      });\n      ctx.ui.setActiveButton(Constants.types.POINT);\n      this.on('click', CommonSelectors.true, handleClick);\n      this.on('keyup', CommonSelectors.isEscapeKey, stopDrawingAndRemove);\n      this.on('keyup', CommonSelectors.isEnterKey, stopDrawingAndRemove);\n      ctx.events.actionable({\n        combineFeatures: false,\n        uncombineFeatures: false,\n        trash: true\n      });\n    },\n\n    stop() {\n      ctx.ui.setActiveButton();\n\n      if (!point.getCoordinate().length) {\n        ctx.store.delete([point.id], {\n          silent: true\n        });\n      }\n    },\n\n    render(geojson, callback) {\n      const isActivePoint = geojson.properties.id === point.id;\n      geojson.properties.active = isActivePoint ? Constants.activeStates.ACTIVE : Constants.activeStates.INACTIVE;\n      if (!isActivePoint) return callback(geojson); // Never render the point we're drawing\n    },\n\n    trash() {\n      stopDrawingAndRemove();\n    }\n\n  };\n};","map":{"version":3,"sources":["/home/jfrank/Ironhack/LastProject/cyclingproject/mapbox-react-tutorial/mapboxAndReact/node_modules/mapbox-gl-draw/src/modes/draw_point.js"],"names":["CommonSelectors","require","Point","Constants","module","exports","ctx","point","type","geojsonTypes","FEATURE","properties","geometry","POINT","coordinates","_test","store","add","stopDrawingAndRemove","events","changeMode","modes","SIMPLE_SELECT","delete","id","silent","handleClick","e","ui","queueMapClasses","mouse","cursors","MOVE","updateCoordinate","lngLat","lng","lat","map","fire","CREATE","features","toGeoJSON","featureIds","start","clearSelected","ADD","setActiveButton","types","on","true","isEscapeKey","isEnterKey","actionable","combineFeatures","uncombineFeatures","trash","stop","getCoordinate","length","render","geojson","callback","isActivePoint","active","activeStates","ACTIVE","INACTIVE"],"mappings":"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","sourcesContent":["const CommonSelectors = require('../lib/common_selectors');\nconst Point = require('../feature_types/point');\nconst Constants = require('../constants');\n\nmodule.exports = function(ctx) {\n\n  const point = new Point(ctx, {\n    type: Constants.geojsonTypes.FEATURE,\n    properties: {},\n    geometry: {\n      type: Constants.geojsonTypes.POINT,\n      coordinates: []\n    }\n  });\n\n  if (ctx._test) ctx._test.point = point;\n\n  ctx.store.add(point);\n\n  function stopDrawingAndRemove() {\n    ctx.events.changeMode(Constants.modes.SIMPLE_SELECT);\n    ctx.store.delete([point.id], { silent: true });\n  }\n\n  function handleClick(e) {\n    ctx.ui.queueMapClasses({ mouse: Constants.cursors.MOVE });\n    point.updateCoordinate('', e.lngLat.lng, e.lngLat.lat);\n    ctx.map.fire(Constants.events.CREATE, {\n      features: [point.toGeoJSON()]\n    });\n    ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, { featureIds: [point.id] });\n  }\n\n  return {\n    start() {\n      ctx.store.clearSelected();\n      ctx.ui.queueMapClasses({ mouse: Constants.cursors.ADD });\n      ctx.ui.setActiveButton(Constants.types.POINT);\n      this.on('click', CommonSelectors.true, handleClick);\n      this.on('keyup', CommonSelectors.isEscapeKey, stopDrawingAndRemove);\n      this.on('keyup', CommonSelectors.isEnterKey, stopDrawingAndRemove);\n      ctx.events.actionable({\n        combineFeatures: false,\n        uncombineFeatures: false,\n        trash: true\n      });\n    },\n\n    stop() {\n      ctx.ui.setActiveButton();\n      if (!point.getCoordinate().length) {\n        ctx.store.delete([point.id], { silent: true });\n      }\n    },\n\n    render(geojson, callback) {\n      const isActivePoint = geojson.properties.id === point.id;\n      geojson.properties.active = (isActivePoint) ? Constants.activeStates.ACTIVE : Constants.activeStates.INACTIVE;\n      if (!isActivePoint) return callback(geojson);\n      // Never render the point we're drawing\n    },\n\n    trash() {\n      stopDrawingAndRemove();\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"script"}