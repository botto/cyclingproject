{"ast":null,"code":"const isEqual = require('lodash.isequal');\n\nconst normalize = require('geojson-normalize');\n\nconst hat = require('hat');\n\nconst featuresAt = require('./lib/features_at');\n\nconst stringSetsAreEqual = require('./lib/string_sets_are_equal');\n\nconst geojsonhint = require('geojsonhint');\n\nconst Constants = require('./constants');\n\nconst StringSet = require('./lib/string_set');\n\nconst featureTypes = {\n  Polygon: require('./feature_types/polygon'),\n  LineString: require('./feature_types/line_string'),\n  Point: require('./feature_types/point'),\n  MultiPolygon: require('./feature_types/multi_feature'),\n  MultiLineString: require('./feature_types/multi_feature'),\n  MultiPoint: require('./feature_types/multi_feature')\n};\n\nmodule.exports = function (ctx, api) {\n  api.modes = Constants.modes;\n\n  api.getFeatureIdsAt = function (point) {\n    const features = featuresAt({\n      point\n    }, null, ctx);\n    return features.map(feature => feature.properties.id);\n  };\n\n  api.getSelectedIds = function () {\n    return ctx.store.getSelectedIds();\n  };\n\n  api.getSelected = function () {\n    return {\n      type: Constants.geojsonTypes.FEATURE_COLLECTION,\n      features: ctx.store.getSelectedIds().map(id => ctx.store.get(id)).map(feature => feature.toGeoJSON())\n    };\n  };\n\n  api.set = function (featureCollection) {\n    if (featureCollection.type === undefined || featureCollection.type !== Constants.geojsonTypes.FEATURE_COLLECTION || !Array.isArray(featureCollection.features)) {\n      throw new Error('Invalid FeatureCollection');\n    }\n\n    const renderBatch = ctx.store.createRenderBatch();\n    let toDelete = ctx.store.getAllIds().slice();\n    const newIds = api.add(featureCollection);\n    const newIdsLookup = new StringSet(newIds);\n    toDelete = toDelete.filter(id => !newIdsLookup.has(id));\n\n    if (toDelete.length) {\n      api.delete(toDelete);\n    }\n\n    renderBatch();\n    return newIds;\n  };\n\n  api.add = function (geojson) {\n    const errors = geojsonhint.hint(geojson, {\n      precisionWarning: false\n    }).filter(e => e.level !== 'message');\n\n    if (errors.length) {\n      throw new Error(errors[0].message);\n    }\n\n    const featureCollection = JSON.parse(JSON.stringify(normalize(geojson)));\n    const ids = featureCollection.features.map(feature => {\n      feature.id = feature.id || hat();\n\n      if (feature.geometry === null) {\n        throw new Error('Invalid geometry: null');\n      }\n\n      if (ctx.store.get(feature.id) === undefined || ctx.store.get(feature.id).type !== feature.geometry.type) {\n        // If the feature has not yet been created ...\n        const Model = featureTypes[feature.geometry.type];\n\n        if (Model === undefined) {\n          throw new Error(`Invalid geometry type: ${feature.geometry.type}.`);\n        }\n\n        const internalFeature = new Model(ctx, feature);\n        ctx.store.add(internalFeature);\n      } else {\n        // If a feature of that id has already been created, and we are swapping it out ...\n        const internalFeature = ctx.store.get(feature.id);\n        internalFeature.properties = feature.properties;\n\n        if (!isEqual(internalFeature.getCoordinates(), feature.geometry.coordinates)) {\n          internalFeature.incomingCoords(feature.geometry.coordinates);\n        }\n      }\n\n      return feature.id;\n    });\n    ctx.store.render();\n    return ids;\n  };\n\n  api.get = function (id) {\n    const feature = ctx.store.get(id);\n\n    if (feature) {\n      return feature.toGeoJSON();\n    }\n  };\n\n  api.getAll = function () {\n    return {\n      type: Constants.geojsonTypes.FEATURE_COLLECTION,\n      features: ctx.store.getAll().map(feature => feature.toGeoJSON())\n    };\n  };\n\n  api.delete = function (featureIds) {\n    ctx.store.delete(featureIds, {\n      silent: true\n    }); // If we were in direct select mode and our selected feature no longer exists\n    // (because it was deleted), we need to get out of that mode.\n\n    if (api.getMode() === Constants.modes.DIRECT_SELECT && !ctx.store.getSelectedIds().length) {\n      ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, undefined, {\n        silent: true\n      });\n    } else {\n      ctx.store.render();\n    }\n\n    return api;\n  };\n\n  api.deleteAll = function () {\n    ctx.store.delete(ctx.store.getAllIds(), {\n      silent: true\n    }); // If we were in direct select mode, now our selected feature no longer exists,\n    // so escape that mode.\n\n    if (api.getMode() === Constants.modes.DIRECT_SELECT) {\n      ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, undefined, {\n        silent: true\n      });\n    } else {\n      ctx.store.render();\n    }\n\n    return api;\n  };\n\n  api.changeMode = function (mode, modeOptions = {}) {\n    // Avoid changing modes just to re-select what's already selected\n    if (mode === Constants.modes.SIMPLE_SELECT && api.getMode() === Constants.modes.SIMPLE_SELECT) {\n      if (stringSetsAreEqual(modeOptions.featureIds || [], ctx.store.getSelectedIds())) return api; // And if we are changing the selection within simple_select mode, just change the selection,\n      // instead of stopping and re-starting the mode\n\n      ctx.store.setSelected(modeOptions.featureIds, {\n        silent: true\n      });\n      ctx.store.render();\n      return api;\n    }\n\n    if (mode === Constants.modes.DIRECT_SELECT && api.getMode() === Constants.modes.DIRECT_SELECT && modeOptions.featureId === ctx.store.getSelectedIds()[0]) {\n      return api;\n    }\n\n    ctx.events.changeMode(mode, modeOptions, {\n      silent: true\n    });\n    return api;\n  };\n\n  api.getMode = function () {\n    return ctx.events.getMode();\n  };\n\n  api.trash = function () {\n    ctx.events.trash({\n      silent: true\n    });\n    return api;\n  };\n\n  api.combineFeatures = function () {\n    ctx.events.combineFeatures({\n      silent: true\n    });\n    return api;\n  };\n\n  api.uncombineFeatures = function () {\n    ctx.events.uncombineFeatures({\n      silent: true\n    });\n    return api;\n  };\n\n  api.setFeatureProperty = function (featureId, property, value) {\n    ctx.store.setFeatureProperty(featureId, property, value);\n    return api;\n  };\n\n  return api;\n};","map":{"version":3,"sources":["/Users/jacquelinechen/Desktop/Mapbox/mapbox-react-tutorial/mapboxAndReact/node_modules/mapbox-gl-draw/src/api.js"],"names":["isEqual","require","normalize","hat","featuresAt","stringSetsAreEqual","geojsonhint","Constants","StringSet","featureTypes","Polygon","LineString","Point","MultiPolygon","MultiLineString","MultiPoint","module","exports","ctx","api","modes","getFeatureIdsAt","point","features","map","feature","properties","id","getSelectedIds","store","getSelected","type","geojsonTypes","FEATURE_COLLECTION","get","toGeoJSON","set","featureCollection","undefined","Array","isArray","Error","renderBatch","createRenderBatch","toDelete","getAllIds","slice","newIds","add","newIdsLookup","filter","has","length","delete","geojson","errors","hint","precisionWarning","e","level","message","JSON","parse","stringify","ids","geometry","Model","internalFeature","getCoordinates","coordinates","incomingCoords","render","getAll","featureIds","silent","getMode","DIRECT_SELECT","events","changeMode","SIMPLE_SELECT","deleteAll","mode","modeOptions","setSelected","featureId","trash","combineFeatures","uncombineFeatures","setFeatureProperty","property","value"],"mappings":"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","sourcesContent":["const isEqual = require('lodash.isequal');\nconst normalize = require('geojson-normalize');\nconst hat = require('hat');\nconst featuresAt = require('./lib/features_at');\nconst stringSetsAreEqual = require('./lib/string_sets_are_equal');\nconst geojsonhint = require('geojsonhint');\nconst Constants = require('./constants');\nconst StringSet = require('./lib/string_set');\n\nconst featureTypes = {\n  Polygon: require('./feature_types/polygon'),\n  LineString: require('./feature_types/line_string'),\n  Point: require('./feature_types/point'),\n  MultiPolygon: require('./feature_types/multi_feature'),\n  MultiLineString: require('./feature_types/multi_feature'),\n  MultiPoint: require('./feature_types/multi_feature')\n};\n\nmodule.exports = function(ctx, api) {\n\n  api.modes = Constants.modes;\n\n  api.getFeatureIdsAt = function(point) {\n    const features = featuresAt({ point }, null, ctx);\n    return features.map(feature => feature.properties.id);\n  };\n\n  api.getSelectedIds = function () {\n    return ctx.store.getSelectedIds();\n  };\n\n  api.getSelected = function () {\n    return {\n      type: Constants.geojsonTypes.FEATURE_COLLECTION,\n      features: ctx.store.getSelectedIds().map(id => ctx.store.get(id)).map(feature => feature.toGeoJSON())\n    };\n  };\n\n  api.set = function(featureCollection) {\n    if (featureCollection.type === undefined || featureCollection.type !== Constants.geojsonTypes.FEATURE_COLLECTION || !Array.isArray(featureCollection.features)) {\n      throw new Error('Invalid FeatureCollection');\n    }\n    const renderBatch = ctx.store.createRenderBatch();\n    let toDelete = ctx.store.getAllIds().slice();\n    const newIds = api.add(featureCollection);\n    const newIdsLookup = new StringSet(newIds);\n\n    toDelete = toDelete.filter(id => !newIdsLookup.has(id));\n    if (toDelete.length) {\n      api.delete(toDelete);\n    }\n\n    renderBatch();\n    return newIds;\n  };\n\n  api.add = function (geojson) {\n    const errors = geojsonhint.hint(geojson, { precisionWarning: false }).filter(e => e.level !== 'message');\n    if (errors.length) {\n      throw new Error(errors[0].message);\n    }\n    const featureCollection = JSON.parse(JSON.stringify(normalize(geojson)));\n\n    const ids = featureCollection.features.map(feature => {\n      feature.id = feature.id || hat();\n\n      if (feature.geometry === null) {\n        throw new Error('Invalid geometry: null');\n      }\n\n      if (ctx.store.get(feature.id) === undefined || ctx.store.get(feature.id).type !== feature.geometry.type) {\n        // If the feature has not yet been created ...\n        const Model = featureTypes[feature.geometry.type];\n        if (Model === undefined) {\n          throw new Error(`Invalid geometry type: ${feature.geometry.type}.`);\n        }\n        const internalFeature = new Model(ctx, feature);\n        ctx.store.add(internalFeature);\n      } else {\n        // If a feature of that id has already been created, and we are swapping it out ...\n        const internalFeature = ctx.store.get(feature.id);\n        internalFeature.properties = feature.properties;\n        if (!isEqual(internalFeature.getCoordinates(), feature.geometry.coordinates)) {\n          internalFeature.incomingCoords(feature.geometry.coordinates);\n        }\n      }\n      return feature.id;\n    });\n\n    ctx.store.render();\n    return ids;\n  };\n\n\n  api.get = function (id) {\n    const feature = ctx.store.get(id);\n    if (feature) {\n      return feature.toGeoJSON();\n    }\n  };\n\n  api.getAll = function() {\n    return {\n      type: Constants.geojsonTypes.FEATURE_COLLECTION,\n      features: ctx.store.getAll().map(feature => feature.toGeoJSON())\n    };\n  };\n\n  api.delete = function(featureIds) {\n    ctx.store.delete(featureIds, { silent: true });\n    // If we were in direct select mode and our selected feature no longer exists\n    // (because it was deleted), we need to get out of that mode.\n    if (api.getMode() === Constants.modes.DIRECT_SELECT && !ctx.store.getSelectedIds().length) {\n      ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, undefined, { silent: true });\n    } else {\n      ctx.store.render();\n    }\n\n    return api;\n  };\n\n  api.deleteAll = function() {\n    ctx.store.delete(ctx.store.getAllIds(), { silent: true });\n    // If we were in direct select mode, now our selected feature no longer exists,\n    // so escape that mode.\n    if (api.getMode() === Constants.modes.DIRECT_SELECT) {\n      ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, undefined, { silent: true });\n    } else {\n      ctx.store.render();\n    }\n\n    return api;\n  };\n\n  api.changeMode = function(mode, modeOptions = {}) {\n    // Avoid changing modes just to re-select what's already selected\n    if (mode === Constants.modes.SIMPLE_SELECT && api.getMode() === Constants.modes.SIMPLE_SELECT) {\n      if (stringSetsAreEqual((modeOptions.featureIds || []), ctx.store.getSelectedIds())) return api;\n      // And if we are changing the selection within simple_select mode, just change the selection,\n      // instead of stopping and re-starting the mode\n      ctx.store.setSelected(modeOptions.featureIds, { silent: true });\n      ctx.store.render();\n      return api;\n    }\n\n    if (mode === Constants.modes.DIRECT_SELECT && api.getMode() === Constants.modes.DIRECT_SELECT &&\n      modeOptions.featureId === ctx.store.getSelectedIds()[0]) {\n      return api;\n    }\n\n    ctx.events.changeMode(mode, modeOptions, { silent: true });\n    return api;\n  };\n\n  api.getMode = function() {\n    return ctx.events.getMode();\n  };\n\n  api.trash = function() {\n    ctx.events.trash({ silent: true });\n    return api;\n  };\n\n  api.combineFeatures = function() {\n    ctx.events.combineFeatures({ silent: true });\n    return api;\n  };\n\n  api.uncombineFeatures = function() {\n    ctx.events.uncombineFeatures({ silent: true });\n    return api;\n  };\n\n  api.setFeatureProperty = function(featureId, property, value) {\n    ctx.store.setFeatureProperty(featureId, property, value);\n    return api;\n  };\n\n  return api;\n};\n"]},"metadata":{},"sourceType":"script"}