{"ast":null,"code":"const {\n  noTarget,\n  isOfMetaType,\n  isInactiveFeature,\n  isShiftDown\n} = require('../lib/common_selectors');\n\nconst createSupplementaryPoints = require('../lib/create_supplementary_points');\n\nconst constrainFeatureMovement = require('../lib/constrain_feature_movement');\n\nconst doubleClickZoom = require('../lib/double_click_zoom');\n\nconst Constants = require('../constants');\n\nconst CommonSelectors = require('../lib/common_selectors');\n\nconst moveFeatures = require('../lib/move_features');\n\nconst isVertex = isOfMetaType(Constants.meta.VERTEX);\nconst isMidpoint = isOfMetaType(Constants.meta.MIDPOINT);\n\nmodule.exports = function (ctx, opts) {\n  const featureId = opts.featureId;\n  const feature = ctx.store.get(featureId);\n\n  if (!feature) {\n    throw new Error('You must provide a featureId to enter direct_select mode');\n  }\n\n  if (feature.type === Constants.geojsonTypes.POINT) {\n    throw new TypeError('direct_select mode doesn\\'t handle point features');\n  }\n\n  let dragMoveLocation = opts.startPos || null;\n  let dragMoving = false;\n  let canDragMove = false;\n  let selectedCoordPaths = opts.coordPath ? [opts.coordPath] : [];\n\n  const fireUpdate = function () {\n    ctx.map.fire(Constants.events.UPDATE, {\n      action: Constants.updateActions.CHANGE_COORDINATES,\n      features: ctx.store.getSelected().map(f => f.toGeoJSON())\n    });\n  };\n\n  const fireActionable = () => ctx.events.actionable({\n    combineFeatures: false,\n    uncombineFeatures: false,\n    trash: selectedCoordPaths.length > 0\n  });\n\n  const startDragging = function (e) {\n    ctx.map.dragPan.disable();\n    canDragMove = true;\n    dragMoveLocation = e.lngLat;\n  };\n\n  const stopDragging = function () {\n    ctx.map.dragPan.enable();\n    dragMoving = false;\n    canDragMove = false;\n    dragMoveLocation = null;\n  };\n\n  const onVertex = function (e) {\n    startDragging(e);\n    const about = e.featureTarget.properties;\n    const selectedIndex = selectedCoordPaths.indexOf(about.coord_path);\n\n    if (!isShiftDown(e) && selectedIndex === -1) {\n      selectedCoordPaths = [about.coord_path];\n    } else if (isShiftDown(e) && selectedIndex === -1) {\n      selectedCoordPaths.push(about.coord_path);\n    }\n\n    feature.changed();\n  };\n\n  const onMidpoint = function (e) {\n    startDragging(e);\n    const about = e.featureTarget.properties;\n    feature.addCoordinate(about.coord_path, about.lng, about.lat);\n    fireUpdate();\n    selectedCoordPaths = [about.coord_path];\n  };\n\n  const onFeature = function (e) {\n    if (selectedCoordPaths.length === 0) startDragging(e);else stopDragging();\n  };\n\n  const dragFeature = (e, delta) => {\n    moveFeatures(ctx.store.getSelected(), delta);\n    dragMoveLocation = e.lngLat;\n  };\n\n  const dragVertex = (e, delta) => {\n    const selectedCoords = selectedCoordPaths.map(coord_path => feature.getCoordinate(coord_path));\n    const selectedCoordPoints = selectedCoords.map(coords => ({\n      type: Constants.geojsonTypes.FEATURE,\n      properties: {},\n      geometry: {\n        type: Constants.geojsonTypes.POINT,\n        coordinates: coords\n      }\n    }));\n    const constrainedDelta = constrainFeatureMovement(selectedCoordPoints, delta);\n\n    for (let i = 0; i < selectedCoords.length; i++) {\n      const coord = selectedCoords[i];\n      feature.updateCoordinate(selectedCoordPaths[i], coord[0] + constrainedDelta.lng, coord[1] + constrainedDelta.lat);\n    }\n  };\n\n  return {\n    start: function () {\n      ctx.store.setSelected(featureId);\n      doubleClickZoom.disable(ctx); // On mousemove that is not a drag, stop vertex movement.\n\n      this.on('mousemove', CommonSelectors.true, e => {\n        const isFeature = CommonSelectors.isActiveFeature(e);\n        const onVertex = isVertex(e);\n        const noCoords = selectedCoordPaths.length === 0;\n        if (isFeature && noCoords) ctx.ui.queueMapClasses({\n          mouse: Constants.cursors.MOVE\n        });else if (onVertex && !noCoords) ctx.ui.queueMapClasses({\n          mouse: Constants.cursors.MOVE\n        });else ctx.ui.queueMapClasses({\n          mouse: Constants.cursors.NONE\n        });\n        stopDragging(e);\n      }); // As soon as you mouse leaves the canvas, update the feature\n\n      this.on('mouseout', () => dragMoving, fireUpdate);\n      this.on('mousedown', isVertex, onVertex);\n      this.on('mousedown', CommonSelectors.isActiveFeature, onFeature);\n      this.on('mousedown', isMidpoint, onMidpoint);\n      this.on('drag', () => canDragMove, e => {\n        dragMoving = true;\n        e.originalEvent.stopPropagation();\n        const delta = {\n          lng: e.lngLat.lng - dragMoveLocation.lng,\n          lat: e.lngLat.lat - dragMoveLocation.lat\n        };\n        if (selectedCoordPaths.length > 0) dragVertex(e, delta);else dragFeature(e, delta);\n        dragMoveLocation = e.lngLat;\n      });\n      this.on('click', CommonSelectors.true, stopDragging);\n      this.on('mouseup', CommonSelectors.true, () => {\n        if (dragMoving) {\n          fireUpdate();\n        }\n\n        stopDragging();\n      });\n      this.on('click', noTarget, () => {\n        ctx.events.changeMode(Constants.modes.SIMPLE_SELECT);\n      });\n      this.on('click', isInactiveFeature, () => {\n        ctx.events.changeMode(Constants.modes.SIMPLE_SELECT);\n      });\n      this.on('click', CommonSelectors.isActiveFeature, () => {\n        selectedCoordPaths = [];\n        feature.changed();\n      });\n    },\n    stop: function () {\n      doubleClickZoom.enable(ctx);\n    },\n    render: function (geojson, push) {\n      if (featureId === geojson.properties.id) {\n        geojson.properties.active = Constants.activeStates.ACTIVE;\n        push(geojson);\n        createSupplementaryPoints(geojson, {\n          map: ctx.map,\n          midpoints: true,\n          selectedPaths: selectedCoordPaths\n        }).forEach(push);\n      } else {\n        geojson.properties.active = Constants.activeStates.INACTIVE;\n        push(geojson);\n      }\n\n      fireActionable();\n    },\n    trash: function () {\n      selectedCoordPaths.sort().reverse().forEach(id => feature.removeCoordinate(id));\n      ctx.map.fire(Constants.events.UPDATE, {\n        action: Constants.updateActions.CHANGE_COORDINATES,\n        features: ctx.store.getSelected().map(f => f.toGeoJSON())\n      });\n      selectedCoordPaths = [];\n      fireActionable();\n\n      if (feature.isValid() === false) {\n        ctx.store.delete([featureId]);\n        ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, {});\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/home/jfrank/Ironhack/LastProject/cyclingproject/mapbox-react-tutorial/mapboxAndReact/node_modules/mapbox-gl-draw/src/modes/direct_select.js"],"names":["noTarget","isOfMetaType","isInactiveFeature","isShiftDown","require","createSupplementaryPoints","constrainFeatureMovement","doubleClickZoom","Constants","CommonSelectors","moveFeatures","isVertex","meta","VERTEX","isMidpoint","MIDPOINT","module","exports","ctx","opts","featureId","feature","store","get","Error","type","geojsonTypes","POINT","TypeError","dragMoveLocation","startPos","dragMoving","canDragMove","selectedCoordPaths","coordPath","fireUpdate","map","fire","events","UPDATE","action","updateActions","CHANGE_COORDINATES","features","getSelected","f","toGeoJSON","fireActionable","actionable","combineFeatures","uncombineFeatures","trash","length","startDragging","e","dragPan","disable","lngLat","stopDragging","enable","onVertex","about","featureTarget","properties","selectedIndex","indexOf","coord_path","push","changed","onMidpoint","addCoordinate","lng","lat","onFeature","dragFeature","delta","dragVertex","selectedCoords","getCoordinate","selectedCoordPoints","coords","FEATURE","geometry","coordinates","constrainedDelta","i","coord","updateCoordinate","start","setSelected","on","true","isFeature","isActiveFeature","noCoords","ui","queueMapClasses","mouse","cursors","MOVE","NONE","originalEvent","stopPropagation","changeMode","modes","SIMPLE_SELECT","stop","render","geojson","id","active","activeStates","ACTIVE","midpoints","selectedPaths","forEach","INACTIVE","sort","reverse","removeCoordinate","isValid","delete"],"mappings":"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","sourcesContent":["const {noTarget, isOfMetaType, isInactiveFeature, isShiftDown} = require('../lib/common_selectors');\nconst createSupplementaryPoints = require('../lib/create_supplementary_points');\nconst constrainFeatureMovement = require('../lib/constrain_feature_movement');\nconst doubleClickZoom = require('../lib/double_click_zoom');\nconst Constants = require('../constants');\nconst CommonSelectors = require('../lib/common_selectors');\nconst moveFeatures = require('../lib/move_features');\n\nconst isVertex = isOfMetaType(Constants.meta.VERTEX);\nconst isMidpoint = isOfMetaType(Constants.meta.MIDPOINT);\n\nmodule.exports = function(ctx, opts) {\n  const featureId = opts.featureId;\n  const feature = ctx.store.get(featureId);\n\n  if (!feature) {\n    throw new Error('You must provide a featureId to enter direct_select mode');\n  }\n\n  if (feature.type === Constants.geojsonTypes.POINT) {\n    throw new TypeError('direct_select mode doesn\\'t handle point features');\n  }\n\n  let dragMoveLocation = opts.startPos || null;\n  let dragMoving = false;\n  let canDragMove = false;\n\n  let selectedCoordPaths = opts.coordPath ? [opts.coordPath] : [];\n\n  const fireUpdate = function() {\n    ctx.map.fire(Constants.events.UPDATE, {\n      action: Constants.updateActions.CHANGE_COORDINATES,\n      features: ctx.store.getSelected().map(f => f.toGeoJSON())\n    });\n  };\n\n  const fireActionable = () => ctx.events.actionable({\n    combineFeatures: false,\n    uncombineFeatures: false,\n    trash: selectedCoordPaths.length > 0\n  });\n\n  const startDragging = function(e) {\n    ctx.map.dragPan.disable();\n    canDragMove = true;\n    dragMoveLocation = e.lngLat;\n  };\n\n  const stopDragging = function() {\n    ctx.map.dragPan.enable();\n    dragMoving = false;\n    canDragMove = false;\n    dragMoveLocation = null;\n  };\n\n  const onVertex = function(e) {\n    startDragging(e);\n    const about = e.featureTarget.properties;\n    const selectedIndex = selectedCoordPaths.indexOf(about.coord_path);\n    if (!isShiftDown(e) && selectedIndex === -1) {\n      selectedCoordPaths = [about.coord_path];\n    } else if (isShiftDown(e) && selectedIndex === -1) {\n      selectedCoordPaths.push(about.coord_path);\n    }\n    feature.changed();\n  };\n\n  const onMidpoint = function(e) {\n    startDragging(e);\n    const about = e.featureTarget.properties;\n    feature.addCoordinate(about.coord_path, about.lng, about.lat);\n    fireUpdate();\n    selectedCoordPaths = [about.coord_path];\n  };\n\n  const onFeature = function(e) {\n    if (selectedCoordPaths.length === 0) startDragging(e);\n    else stopDragging();\n  };\n\n  const dragFeature = (e, delta) => {\n    moveFeatures(ctx.store.getSelected(), delta);\n    dragMoveLocation = e.lngLat;\n  };\n\n  const dragVertex = (e, delta) => {\n    const selectedCoords = selectedCoordPaths.map(coord_path => feature.getCoordinate(coord_path));\n    const selectedCoordPoints = selectedCoords.map(coords => ({\n      type: Constants.geojsonTypes.FEATURE,\n      properties: {},\n      geometry: {\n        type: Constants.geojsonTypes.POINT,\n        coordinates: coords\n      }\n    }));\n\n    const constrainedDelta = constrainFeatureMovement(selectedCoordPoints, delta);\n    for (let i = 0; i < selectedCoords.length; i++) {\n      const coord = selectedCoords[i];\n      feature.updateCoordinate(selectedCoordPaths[i],\n      coord[0] + constrainedDelta.lng,\n      coord[1] + constrainedDelta.lat);\n    }\n  };\n\n  return {\n    start: function() {\n      ctx.store.setSelected(featureId);\n      doubleClickZoom.disable(ctx);\n\n      // On mousemove that is not a drag, stop vertex movement.\n      this.on('mousemove', CommonSelectors.true, e => {\n        const isFeature = CommonSelectors.isActiveFeature(e);\n        const onVertex = isVertex(e);\n        const noCoords = selectedCoordPaths.length === 0;\n        if (isFeature && noCoords) ctx.ui.queueMapClasses({ mouse: Constants.cursors.MOVE });\n        else if (onVertex && !noCoords) ctx.ui.queueMapClasses({ mouse: Constants.cursors.MOVE });\n        else ctx.ui.queueMapClasses({ mouse: Constants.cursors.NONE });\n        stopDragging(e);\n      });\n\n      // As soon as you mouse leaves the canvas, update the feature\n      this.on('mouseout', () => dragMoving, fireUpdate);\n\n      this.on('mousedown', isVertex, onVertex);\n      this.on('mousedown', CommonSelectors.isActiveFeature, onFeature);\n      this.on('mousedown', isMidpoint, onMidpoint);\n      this.on('drag', () => canDragMove, (e) => {\n        dragMoving = true;\n        e.originalEvent.stopPropagation();\n\n        const delta = {\n          lng: e.lngLat.lng - dragMoveLocation.lng,\n          lat: e.lngLat.lat - dragMoveLocation.lat\n        };\n        if (selectedCoordPaths.length > 0) dragVertex(e, delta);\n        else dragFeature(e, delta);\n\n        dragMoveLocation = e.lngLat;\n      });\n      this.on('click', CommonSelectors.true, stopDragging);\n      this.on('mouseup', CommonSelectors.true, () => {\n        if (dragMoving) {\n          fireUpdate();\n        }\n        stopDragging();\n      });\n      this.on('click', noTarget, () => {\n        ctx.events.changeMode(Constants.modes.SIMPLE_SELECT);\n      });\n      this.on('click', isInactiveFeature, () => {\n        ctx.events.changeMode(Constants.modes.SIMPLE_SELECT);\n      });\n      this.on('click', CommonSelectors.isActiveFeature, () => {\n        selectedCoordPaths = [];\n        feature.changed();\n      });\n    },\n    stop: function() {\n      doubleClickZoom.enable(ctx);\n    },\n    render: function(geojson, push) {\n      if (featureId === geojson.properties.id) {\n        geojson.properties.active = Constants.activeStates.ACTIVE;\n        push(geojson);\n        createSupplementaryPoints(geojson, {\n          map: ctx.map,\n          midpoints: true,\n          selectedPaths: selectedCoordPaths\n        }).forEach(push);\n      } else {\n        geojson.properties.active = Constants.activeStates.INACTIVE;\n        push(geojson);\n      }\n      fireActionable();\n    },\n    trash: function() {\n      selectedCoordPaths.sort().reverse().forEach(id => feature.removeCoordinate(id));\n      ctx.map.fire(Constants.events.UPDATE, {\n        action: Constants.updateActions.CHANGE_COORDINATES,\n        features: ctx.store.getSelected().map(f => f.toGeoJSON())\n      });\n      selectedCoordPaths = [];\n      fireActionable();\n      if (feature.isValid() === false) {\n        ctx.store.delete([featureId]);\n        ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, {});\n      }\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"script"}