{"ast":null,"code":"const CommonSelectors = require('../lib/common_selectors');\n\nconst Polygon = require('../feature_types/polygon');\n\nconst doubleClickZoom = require('../lib/double_click_zoom');\n\nconst Constants = require('../constants');\n\nconst isEventAtCoordinates = require('../lib/is_event_at_coordinates');\n\nconst createVertex = require('../lib/create_vertex');\n\nmodule.exports = function (ctx) {\n  const polygon = new Polygon(ctx, {\n    type: Constants.geojsonTypes.FEATURE,\n    properties: {},\n    geometry: {\n      type: Constants.geojsonTypes.POLYGON,\n      coordinates: [[]]\n    }\n  });\n  let currentVertexPosition = 0;\n  if (ctx._test) ctx._test.polygon = polygon;\n  ctx.store.add(polygon);\n  return {\n    start() {\n      ctx.store.clearSelected();\n      doubleClickZoom.disable(ctx);\n      ctx.ui.queueMapClasses({\n        mouse: Constants.cursors.ADD\n      });\n      ctx.ui.setActiveButton(Constants.types.POLYGON);\n      this.on('mousemove', CommonSelectors.true, e => {\n        polygon.updateCoordinate(`0.${currentVertexPosition}`, e.lngLat.lng, e.lngLat.lat);\n\n        if (CommonSelectors.isVertex(e)) {\n          ctx.ui.queueMapClasses({\n            mouse: Constants.cursors.POINTER\n          });\n        }\n      });\n      this.on('click', CommonSelectors.true, e => {\n        if (currentVertexPosition > 0 && isEventAtCoordinates(e, polygon.coordinates[0][currentVertexPosition - 1])) {\n          return ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, {\n            featureIds: [polygon.id]\n          });\n        }\n\n        ctx.ui.queueMapClasses({\n          mouse: Constants.cursors.ADD\n        });\n        polygon.updateCoordinate(`0.${currentVertexPosition}`, e.lngLat.lng, e.lngLat.lat);\n        currentVertexPosition++;\n      });\n      this.on('click', CommonSelectors.isVertex, () => {\n        return ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, {\n          featureIds: [polygon.id]\n        });\n      });\n      this.on('keyup', CommonSelectors.isEscapeKey, () => {\n        ctx.store.delete([polygon.id], {\n          silent: true\n        });\n        ctx.events.changeMode(Constants.modes.SIMPLE_SELECT);\n      });\n      this.on('keyup', CommonSelectors.isEnterKey, () => {\n        ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, {\n          featureIds: [polygon.id]\n        });\n      });\n      ctx.events.actionable({\n        combineFeatures: false,\n        uncombineFeatures: false,\n        trash: true\n      });\n    },\n\n    stop: function () {\n      ctx.ui.queueMapClasses({\n        mouse: Constants.cursors.NONE\n      });\n      doubleClickZoom.enable(ctx);\n      ctx.ui.setActiveButton(); // check to see if we've deleted this feature\n\n      if (ctx.store.get(polygon.id) === undefined) return; //remove last added coordinate\n\n      polygon.removeCoordinate(`0.${currentVertexPosition}`);\n\n      if (polygon.isValid()) {\n        ctx.map.fire(Constants.events.CREATE, {\n          features: [polygon.toGeoJSON()]\n        });\n      } else {\n        ctx.store.delete([polygon.id], {\n          silent: true\n        });\n        ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, {}, {\n          silent: true\n        });\n      }\n    },\n\n    render(geojson, callback) {\n      const isActivePolygon = geojson.properties.id === polygon.id;\n      geojson.properties.active = isActivePolygon ? Constants.activeStates.ACTIVE : Constants.activeStates.INACTIVE;\n      if (!isActivePolygon) return callback(geojson); // Don't render a polygon until it has two positions\n      // (and a 3rd which is just the first repeated)\n\n      if (geojson.geometry.coordinates.length === 0) return;\n      const coordinateCount = geojson.geometry.coordinates[0].length; // If we have fewer than two positions (plus the closer),\n      // it's not yet a shape to render\n\n      if (coordinateCount < 3) return;\n      geojson.properties.meta = Constants.meta.FEATURE;\n\n      if (coordinateCount > 4) {\n        // Add a start position marker to the map, clicking on this will finish the feature\n        // This should only be shown when we're in a valid spot\n        callback(createVertex(polygon.id, geojson.geometry.coordinates[0][0], '0.0', false));\n        const endPos = geojson.geometry.coordinates[0].length - 3;\n        callback(createVertex(polygon.id, geojson.geometry.coordinates[0][endPos], `0.${endPos}`, false));\n      } // If we have more than two positions (plus the closer),\n      // render the Polygon\n\n\n      if (coordinateCount > 3) {\n        return callback(geojson);\n      } // If we've only drawn two positions (plus the closer),\n      // make a LineString instead of a Polygon\n\n\n      const lineCoordinates = [[geojson.geometry.coordinates[0][0][0], geojson.geometry.coordinates[0][0][1]], [geojson.geometry.coordinates[0][1][0], geojson.geometry.coordinates[0][1][1]]];\n      return callback({\n        type: Constants.geojsonTypes.FEATURE,\n        properties: geojson.properties,\n        geometry: {\n          coordinates: lineCoordinates,\n          type: Constants.geojsonTypes.LINE_STRING\n        }\n      });\n    },\n\n    trash() {\n      ctx.store.delete([polygon.id], {\n        silent: true\n      });\n      ctx.events.changeMode(Constants.modes.SIMPLE_SELECT);\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/jacquelinechen/Desktop/Mapbox/mapbox-react-tutorial/mapboxAndReact/node_modules/mapbox-gl-draw/src/modes/draw_polygon.js"],"names":["CommonSelectors","require","Polygon","doubleClickZoom","Constants","isEventAtCoordinates","createVertex","module","exports","ctx","polygon","type","geojsonTypes","FEATURE","properties","geometry","POLYGON","coordinates","currentVertexPosition","_test","store","add","start","clearSelected","disable","ui","queueMapClasses","mouse","cursors","ADD","setActiveButton","types","on","true","e","updateCoordinate","lngLat","lng","lat","isVertex","POINTER","events","changeMode","modes","SIMPLE_SELECT","featureIds","id","isEscapeKey","delete","silent","isEnterKey","actionable","combineFeatures","uncombineFeatures","trash","stop","NONE","enable","get","undefined","removeCoordinate","isValid","map","fire","CREATE","features","toGeoJSON","render","geojson","callback","isActivePolygon","active","activeStates","ACTIVE","INACTIVE","length","coordinateCount","meta","endPos","lineCoordinates","LINE_STRING"],"mappings":"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","sourcesContent":["const CommonSelectors = require('../lib/common_selectors');\nconst Polygon = require('../feature_types/polygon');\nconst doubleClickZoom = require('../lib/double_click_zoom');\nconst Constants = require('../constants');\nconst isEventAtCoordinates = require('../lib/is_event_at_coordinates');\nconst createVertex = require('../lib/create_vertex');\n\nmodule.exports = function(ctx) {\n\n  const polygon = new Polygon(ctx, {\n    type: Constants.geojsonTypes.FEATURE,\n    properties: {},\n    geometry: {\n      type: Constants.geojsonTypes.POLYGON,\n      coordinates: [[]]\n    }\n  });\n  let currentVertexPosition = 0;\n\n  if (ctx._test) ctx._test.polygon = polygon;\n\n  ctx.store.add(polygon);\n\n  return {\n    start() {\n      ctx.store.clearSelected();\n      doubleClickZoom.disable(ctx);\n      ctx.ui.queueMapClasses({ mouse: Constants.cursors.ADD });\n      ctx.ui.setActiveButton(Constants.types.POLYGON);\n      this.on('mousemove', CommonSelectors.true, e => {\n        polygon.updateCoordinate(`0.${currentVertexPosition}`, e.lngLat.lng, e.lngLat.lat);\n        if (CommonSelectors.isVertex(e)) {\n          ctx.ui.queueMapClasses({ mouse: Constants.cursors.POINTER });\n        }\n      });\n      this.on('click', CommonSelectors.true, (e) => {\n        if (currentVertexPosition > 0 && isEventAtCoordinates(e, polygon.coordinates[0][currentVertexPosition - 1])) {\n          return ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, { featureIds: [polygon.id] });\n        }\n        ctx.ui.queueMapClasses({ mouse: Constants.cursors.ADD });\n        polygon.updateCoordinate(`0.${currentVertexPosition}`, e.lngLat.lng, e.lngLat.lat);\n        currentVertexPosition++;\n      });\n      this.on('click', CommonSelectors.isVertex, () => {\n        return ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, { featureIds: [polygon.id] });\n      });\n      this.on('keyup', CommonSelectors.isEscapeKey, () => {\n        ctx.store.delete([polygon.id], { silent: true });\n        ctx.events.changeMode(Constants.modes.SIMPLE_SELECT);\n      });\n      this.on('keyup', CommonSelectors.isEnterKey, () => {\n        ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, { featureIds: [polygon.id] });\n      });\n      ctx.events.actionable({\n        combineFeatures: false,\n        uncombineFeatures: false,\n        trash: true\n      });\n    },\n\n    stop: function() {\n      ctx.ui.queueMapClasses({ mouse: Constants.cursors.NONE });\n      doubleClickZoom.enable(ctx);\n      ctx.ui.setActiveButton();\n\n      // check to see if we've deleted this feature\n      if (ctx.store.get(polygon.id) === undefined) return;\n\n      //remove last added coordinate\n      polygon.removeCoordinate(`0.${currentVertexPosition}`);\n      if (polygon.isValid()) {\n        ctx.map.fire(Constants.events.CREATE, {\n          features: [polygon.toGeoJSON()]\n        });\n      } else {\n        ctx.store.delete([polygon.id], { silent: true });\n        ctx.events.changeMode(Constants.modes.SIMPLE_SELECT, {}, { silent: true });\n      }\n    },\n\n    render(geojson, callback) {\n      const isActivePolygon = geojson.properties.id === polygon.id;\n      geojson.properties.active = (isActivePolygon) ? Constants.activeStates.ACTIVE : Constants.activeStates.INACTIVE;\n      if (!isActivePolygon) return callback(geojson);\n\n      // Don't render a polygon until it has two positions\n      // (and a 3rd which is just the first repeated)\n      if (geojson.geometry.coordinates.length === 0) return;\n\n      const coordinateCount = geojson.geometry.coordinates[0].length;\n\n      // If we have fewer than two positions (plus the closer),\n      // it's not yet a shape to render\n      if (coordinateCount < 3) return;\n\n      geojson.properties.meta = Constants.meta.FEATURE;\n\n      if (coordinateCount > 4) {\n        // Add a start position marker to the map, clicking on this will finish the feature\n        // This should only be shown when we're in a valid spot\n        callback(createVertex(polygon.id, geojson.geometry.coordinates[0][0], '0.0', false));\n        const endPos = geojson.geometry.coordinates[0].length - 3;\n        callback(createVertex(polygon.id, geojson.geometry.coordinates[0][endPos], `0.${endPos}`, false));\n      }\n\n      // If we have more than two positions (plus the closer),\n      // render the Polygon\n      if (coordinateCount > 3) {\n        return callback(geojson);\n      }\n\n      // If we've only drawn two positions (plus the closer),\n      // make a LineString instead of a Polygon\n      const lineCoordinates = [\n        [geojson.geometry.coordinates[0][0][0], geojson.geometry.coordinates[0][0][1]], [geojson.geometry.coordinates[0][1][0], geojson.geometry.coordinates[0][1][1]]\n      ];\n      return callback({\n        type: Constants.geojsonTypes.FEATURE,\n        properties: geojson.properties,\n        geometry: {\n          coordinates: lineCoordinates,\n          type: Constants.geojsonTypes.LINE_STRING\n        }\n      });\n    },\n    trash() {\n      ctx.store.delete([polygon.id], { silent: true });\n      ctx.events.changeMode(Constants.modes.SIMPLE_SELECT);\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"script"}