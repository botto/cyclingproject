{"ast":null,"code":"'use strict';\n\nmodule.exports = Point;\n\nfunction Point(x, y) {\n  this.x = x;\n  this.y = y;\n}\n\nPoint.prototype = {\n  clone: function () {\n    return new Point(this.x, this.y);\n  },\n  add: function (p) {\n    return this.clone()._add(p);\n  },\n  sub: function (p) {\n    return this.clone()._sub(p);\n  },\n  mult: function (k) {\n    return this.clone()._mult(k);\n  },\n  div: function (k) {\n    return this.clone()._div(k);\n  },\n  rotate: function (a) {\n    return this.clone()._rotate(a);\n  },\n  matMult: function (m) {\n    return this.clone()._matMult(m);\n  },\n  unit: function () {\n    return this.clone()._unit();\n  },\n  perp: function () {\n    return this.clone()._perp();\n  },\n  round: function () {\n    return this.clone()._round();\n  },\n  mag: function () {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  },\n  equals: function (p) {\n    return this.x === p.x && this.y === p.y;\n  },\n  dist: function (p) {\n    return Math.sqrt(this.distSqr(p));\n  },\n  distSqr: function (p) {\n    var dx = p.x - this.x,\n        dy = p.y - this.y;\n    return dx * dx + dy * dy;\n  },\n  angle: function () {\n    return Math.atan2(this.y, this.x);\n  },\n  angleTo: function (b) {\n    return Math.atan2(this.y - b.y, this.x - b.x);\n  },\n  angleWith: function (b) {\n    return this.angleWithSep(b.x, b.y);\n  },\n  // Find the angle of the two vectors, solving the formula for the cross product a x b = |a||b|sin(θ) for θ.\n  angleWithSep: function (x, y) {\n    return Math.atan2(this.x * y - this.y * x, this.x * x + this.y * y);\n  },\n  _matMult: function (m) {\n    var x = m[0] * this.x + m[1] * this.y,\n        y = m[2] * this.x + m[3] * this.y;\n    this.x = x;\n    this.y = y;\n    return this;\n  },\n  _add: function (p) {\n    this.x += p.x;\n    this.y += p.y;\n    return this;\n  },\n  _sub: function (p) {\n    this.x -= p.x;\n    this.y -= p.y;\n    return this;\n  },\n  _mult: function (k) {\n    this.x *= k;\n    this.y *= k;\n    return this;\n  },\n  _div: function (k) {\n    this.x /= k;\n    this.y /= k;\n    return this;\n  },\n  _unit: function () {\n    this._div(this.mag());\n\n    return this;\n  },\n  _perp: function () {\n    var y = this.y;\n    this.y = this.x;\n    this.x = -y;\n    return this;\n  },\n  _rotate: function (angle) {\n    var cos = Math.cos(angle),\n        sin = Math.sin(angle),\n        x = cos * this.x - sin * this.y,\n        y = sin * this.x + cos * this.y;\n    this.x = x;\n    this.y = y;\n    return this;\n  },\n  _round: function () {\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    return this;\n  }\n}; // constructs Point from an array if necessary\n\nPoint.convert = function (a) {\n  if (a instanceof Point) {\n    return a;\n  }\n\n  if (Array.isArray(a)) {\n    return new Point(a[0], a[1]);\n  }\n\n  return a;\n};","map":{"version":3,"sources":["/home/jfrank/Ironhack/LastProject/cyclingproject/mapbox-react-tutorial/mapboxAndReact/node_modules/point-geometry/index.js"],"names":["module","exports","Point","x","y","prototype","clone","add","p","_add","sub","_sub","mult","k","_mult","div","_div","rotate","a","_rotate","matMult","m","_matMult","unit","_unit","perp","_perp","round","_round","mag","Math","sqrt","equals","dist","distSqr","dx","dy","angle","atan2","angleTo","b","angleWith","angleWithSep","cos","sin","convert","Array","isArray"],"mappings":"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","sourcesContent":["'use strict';\n\nmodule.exports = Point;\n\nfunction Point(x, y) {\n    this.x = x;\n    this.y = y;\n}\n\nPoint.prototype = {\n    clone: function() { return new Point(this.x, this.y); },\n\n    add:     function(p) { return this.clone()._add(p);     },\n    sub:     function(p) { return this.clone()._sub(p);     },\n    mult:    function(k) { return this.clone()._mult(k);    },\n    div:     function(k) { return this.clone()._div(k);     },\n    rotate:  function(a) { return this.clone()._rotate(a);  },\n    matMult: function(m) { return this.clone()._matMult(m); },\n    unit:    function() { return this.clone()._unit(); },\n    perp:    function() { return this.clone()._perp(); },\n    round:   function() { return this.clone()._round(); },\n\n    mag: function() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    },\n\n    equals: function(p) {\n        return this.x === p.x &&\n               this.y === p.y;\n    },\n\n    dist: function(p) {\n        return Math.sqrt(this.distSqr(p));\n    },\n\n    distSqr: function(p) {\n        var dx = p.x - this.x,\n            dy = p.y - this.y;\n        return dx * dx + dy * dy;\n    },\n\n    angle: function() {\n        return Math.atan2(this.y, this.x);\n    },\n\n    angleTo: function(b) {\n        return Math.atan2(this.y - b.y, this.x - b.x);\n    },\n\n    angleWith: function(b) {\n        return this.angleWithSep(b.x, b.y);\n    },\n\n    // Find the angle of the two vectors, solving the formula for the cross product a x b = |a||b|sin(θ) for θ.\n    angleWithSep: function(x, y) {\n        return Math.atan2(\n            this.x * y - this.y * x,\n            this.x * x + this.y * y);\n    },\n\n    _matMult: function(m) {\n        var x = m[0] * this.x + m[1] * this.y,\n            y = m[2] * this.x + m[3] * this.y;\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    _add: function(p) {\n        this.x += p.x;\n        this.y += p.y;\n        return this;\n    },\n\n    _sub: function(p) {\n        this.x -= p.x;\n        this.y -= p.y;\n        return this;\n    },\n\n    _mult: function(k) {\n        this.x *= k;\n        this.y *= k;\n        return this;\n    },\n\n    _div: function(k) {\n        this.x /= k;\n        this.y /= k;\n        return this;\n    },\n\n    _unit: function() {\n        this._div(this.mag());\n        return this;\n    },\n\n    _perp: function() {\n        var y = this.y;\n        this.y = this.x;\n        this.x = -y;\n        return this;\n    },\n\n    _rotate: function(angle) {\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            x = cos * this.x - sin * this.y,\n            y = sin * this.x + cos * this.y;\n        this.x = x;\n        this.y = y;\n        return this;\n    },\n\n    _round: function() {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    }\n};\n\n// constructs Point from an array if necessary\nPoint.convert = function (a) {\n    if (a instanceof Point) {\n        return a;\n    }\n    if (Array.isArray(a)) {\n        return new Point(a[0], a[1]);\n    }\n    return a;\n};\n"]},"metadata":{},"sourceType":"script"}